{"version":3,"sources":["components/placeholders/PlaceholderWrappers.tsx","components/crypto-assets/CryptoAssetFullDetails.tsx","components/crypto-assets/CryptoAssetInfo.tsx","components/price-action/styled.tsx","components/price-action/ChartTimeRangeSelection.tsx","utils/hooks/useMediaQueries.ts","utils/isMediaQueryActive.ts","utils/hooks/useMediaQueryMatch.ts","components/charts/ChartErrorMessage.tsx","components/charts/styled.tsx","components/charts/Chart.tsx","components/price-action/HistoricalPriceChart.tsx","components/price-action/useHistoricalPrice.ts","components/price-action/PriceAction.tsx"],"names":["MainSubContentPlaceholder","props","className","showContent","children","height","width","ContentPlaceholder","count","placeholders","Array","fill","map","_","index","key","CyrptoAssetFullDetails","useAssetDetailsService","assetId","getAsset","asset","error","loading","status","StateFetchStatus","Busy","useEffect","formatPrice","price","marketCap","rank","totalVolume","low24h","high24h","allTimeHigh","allTimeHighDate","parseDateString","fullyDilutedValuation","formatQuantity","circulatingSupply","maxSupply","lastUpdated","DATETIME_FORMAT","Wrapper","styled","ContentWrapper","MainSubContentWrapper","AssetNameWrapper","div","theme","fontSize","h4","CryptoAssetInfo","assets","useAppSelector","state","list","assetsStatus","usePricesFeed","get","maxColumnSize","minColumnSize","src","image","alt","name","size","borderRadius","symbol","toUpperCase","color","getColorFromSign","priceChangePercent24h","formatPercent","PriceActionWrapper","TimeRangeSelectionWrapper","ul","colors","border","TimeRangeSelectionItem","li","opacityMuted","primary","historicalDaysRange","ALL","ChartTimeRangeSelection","typedObjectEntries","intervalLabel","intervalValue","onClick","onSelectionChanged","selectedDayRange","undefined","useMediaQueries","onMediaQueryChange","subscription","subscribeToMediaQueries$","subscribe","unsubscribe","screenSizes","Object","values","mediaQueries$","query","mediaQuery","window","matchMedia","fromEventPattern","handler","addEventListener","removeEventListener","pipe","matches","media","screenSize","getScreenSizeFromMediaQuery","matchingScreenSize","numericScreenSize","getNumericScreenSize","subscribeToMediaQuery$","merge","match","getSafeNumber","tabletSize","tablet","isLessThan","val1","val2","isMediaQueryActive","mediaQueryMatch","targetSize","isDefined","isActive","ChartErrorMessage","MainChartWrapper","fontOnBackground","ToolTipWrapper","BaseWrapper","secondaryDark","bodyXSmall","Chart","domain","useMemo","getSafeMinMax","chartData","dataKey","hideAxis","useState","innerWidth","setIsActive","onMediaMatch","useCallback","useMediaQueryMatch","ResponsiveContainer","aspect","AreaChart","data","margin","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","primaryLight","XAxis","xAxisDataKey","tickFormatter","xAxisLabelFormatter","tickLine","axisLine","stroke","opacity","opacityDisabled","YAxis","type","valueFormatter","hide","Tooltip","labelFormatter","label","payload","value","formatDateTime","content","CustomTooltip","formatter","Area","active","MemoizedChart","React","memo","HistoricalPriceChart","setError","Map","assetPriceHistory","setAssetPriceHistory","useService","AssetsService","getHistoricalPriceData","onResponse","response","set","days","historicalPriceData","onError","err","errorMessage","console","setRequest","isBusy","getHistoricalData","request","vs_currency","DEFAULT_CURRENCY","useHistoricalPrice","time","formatDayTime","formatDate","LoadingSpinner","PriceAction","useParams","setDayRange"],"mappings":"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","file":"static/js/4.47d2a9bf.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { MainSubContentWrapper } from \"../ContentWrappers\";\nimport { TextPlaceHolder, TextPlaceholderProps } from \"./styled\";\n\ninterface MainSubPlaceholderProps {\n  className?: string;\n  showContent: boolean;\n}\nexport const MainSubContentPlaceholder: FC<MainSubPlaceholderProps> = (\n  props,\n) => {\n  return (\n    <MainSubContentWrapper className={props.className}>\n      {props.showContent ? (\n        props.children\n      ) : (\n        <>\n          <TextPlaceHolder />\n          <TextPlaceHolder height=\"0.75rem\" width=\"2rem\" />\n        </>\n      )}\n    </MainSubContentWrapper>\n  );\n};\n\ninterface PlaceholderProps extends TextPlaceholderProps {\n  count?: number;\n  showContent: boolean;\n}\nexport const ContentPlaceholder: FC<PlaceholderProps> = ({\n  children,\n  count = 1,\n  showContent,\n  ...props\n}) => {\n  const placeholders = new Array(count).fill({});\n  return (\n    <>\n      {showContent\n        ? children\n        : placeholders.map((_, index) => (\n            <TextPlaceHolder {...props} key={index} />\n          ))}\n    </>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { StateFetchStatus } from \"../../redux/AppState\";\nimport {\n  DATETIME_FORMAT,\n  formatPrice,\n  formatQuantity,\n  parseDateString,\n} from \"../../utils/formatters\";\nimport { ContentPlaceholder } from \"../placeholders/PlaceholderWrappers\";\nimport { DetailsWrapper, DetailsRow } from \"./styled\";\nimport { useAssetDetailsService } from \"./useAssetsService\";\n\ninterface Props {\n  assetId: string;\n}\n\nexport const CyrptoAssetFullDetails: FC<Props> = (props) => {\n  const { getAsset, asset, error, status } = useAssetDetailsService(\n    props.assetId,\n  );\n  const loading = status === StateFetchStatus.Busy;\n\n  useEffect(() => {\n    getAsset();\n  }, [getAsset]);\n\n  return (\n    <DetailsWrapper>\n      <ContentPlaceholder count={4} showContent={!loading} width=\"8rem\">\n        <DetailsRow>\n          <span className=\"label\">Current Price</span>\n          <span className=\"value\">{formatPrice(asset?.price)}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">Market Cap</span>\n          <span className=\"value\">{formatPrice(asset?.marketCap)}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">Market Cap Rank</span>\n          <span className=\"value\">{asset?.rank}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">Trading Volume</span>\n          <span className=\"value\">{formatPrice(asset?.totalVolume)}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">24h Low</span>\n          <span className=\"value\">{formatPrice(asset?.low24h, 3)}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">24h High</span>\n          <span className=\"value\">{formatPrice(asset?.high24h)}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">All-Time High</span>\n          <span>\n            <span className=\"value\">{formatPrice(asset?.allTimeHigh)} </span>\n            <span className=\"value--small\">\n              {asset?.allTimeHighDate\n                ? `(${parseDateString(asset?.allTimeHighDate)})`\n                : \"--\"}\n            </span>\n          </span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">Fully Diluted Valuation</span>\n          <span className=\"value\">\n            {formatPrice(asset?.fullyDilutedValuation)}\n          </span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">Circulating Supply</span>\n          <span className=\"value\">\n            {formatQuantity(asset?.circulatingSupply)}\n          </span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">Max Supply</span>\n          <span className=\"value\">{formatQuantity(asset?.maxSupply)}</span>\n        </DetailsRow>\n        <DetailsRow>\n          <span className=\"label\">\n            {error ? \"Failed To Update\" : \"Last Updated\"}\n          </span>\n          <span className=\"value\">\n            {error ?? parseDateString(asset?.lastUpdated, DATETIME_FORMAT)}\n          </span>\n        </DetailsRow>\n      </ContentPlaceholder>\n    </DetailsWrapper>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { theme } from \"../../theme/theme\";\nimport {\n  formatPercent,\n  formatPrice,\n  getColorFromSign,\n} from \"../../utils/formatters\";\nimport { usePricesFeed } from \"../../utils/hooks/useFeedService\";\nimport { PlaceHolder } from \"../placeholders/styled\";\nimport { ContentWrapper, MainSubContentWrapper } from \"../ContentWrappers\";\nimport { PercentChange } from \"./styled\";\nimport { MainSubContentPlaceholder } from \"../placeholders/PlaceholderWrappers\";\nimport { useAppSelector } from \"../../redux/useAppSelector\";\nimport { StateFetchStatus } from \"../../redux/AppState\";\n\ninterface CryptoAssetInfoProps {\n  assetId: string;\n}\n\nconst Wrapper = styled(ContentWrapper)`\n  place-content: unset;\n\n  ${MainSubContentWrapper} {\n    text-align: left;\n\n    &.numeric-content {\n      text-align: right;\n    }\n  }\n\n  .content {\n    &--asset-name {\n      padding-right: 3rem;\n    }\n  }\n`;\n\nconst AssetNameWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  img {\n    height: ${({ theme }) => theme.fontSize.h4};\n    width: ${({ theme }) => theme.fontSize.h4};\n  }\n`;\n\nexport const CryptoAssetInfo: FC<CryptoAssetInfoProps> = (props) => {\n  const assets = useAppSelector((state) => state.assets?.list);\n  const assetsStatus = useAppSelector((state) => state.assets?.status);\n  usePricesFeed();\n\n  const asset = assets?.get(props.assetId);\n  const loading = assetsStatus === StateFetchStatus.Busy;\n\n  return (\n    <Wrapper maxColumnSize=\"15rem\" minColumnSize=\"20rem\">\n      <AssetNameWrapper>\n        {asset ? (\n          <img src={asset.image} alt={asset.name} />\n        ) : (\n          <PlaceHolder size={theme.fontSize.h4} borderRadius=\"50%\" />\n        )}\n        <MainSubContentPlaceholder\n          className=\"content--asset-name\"\n          showContent={!loading}\n        >\n          <span className=\"content__main--large content-name\">\n            {asset?.name}\n          </span>\n          <span className=\"content__sub\">{asset?.symbol.toUpperCase()}</span>\n        </MainSubContentPlaceholder>\n      </AssetNameWrapper>\n      <MainSubContentPlaceholder\n        className=\"numeric-content\"\n        showContent={!loading}\n      >\n        <span className=\"content__main--large\">\n          {formatPrice(asset?.price)}\n        </span>\n        <span>\n          <PercentChange color={getColorFromSign(asset?.priceChangePercent24h)}>\n            {formatPercent(asset?.priceChangePercent24h)}\n          </PercentChange>\n          <span className=\"content__sub\"> (24h)</span>\n        </span>\n      </MainSubContentPlaceholder>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const PriceActionWrapper = styled.div`\n  width: 100%;\n  max-width: 70rem;\n  margin: 0 auto;\n`;\n\nexport const TimeRangeSelectionWrapper = styled.ul`\n  list-style: none;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  border-bottom: solid 1px ${({ theme }) => theme.colors.border};\n`;\n\nexport const TimeRangeSelectionItem = styled.li`\n  text-align: center;\n  width: 4rem;\n  padding-bottom: 1.5rem;\n  transition: all 200ms;\n  margin: 0 0.5rem;\n  margin-bottom: -1px;\n  border-bottom: solid 1px transparent;\n  opacity: ${({ theme }) => theme.opacityMuted};\n\n  &.selected,\n  &:hover {\n    opacity: 1;\n    border-bottom-color: ${({ theme }) => theme.colors.primary};\n    color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:hover {\n    cursor: default;\n  }\n`;\n","import React, { FC } from \"react\";\nimport { HistoricalDaysRange } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { typedObjectEntries } from \"../../utils/typedObjectEntries\";\nimport { TimeRangeSelectionItem, TimeRangeSelectionWrapper } from \"./styled\";\n\ntype HistoricalDaysRangeLabel = \"1D\" | \"5D\" | \"1M\" | \"3M\" | \"6M\" | \"1Y\" | \"ALL\";\n\ntype Intervals = {\n  [interval in HistoricalDaysRangeLabel]: HistoricalDaysRange;\n};\n\nexport const historicalDaysRange: Intervals = {\n  \"1D\": 1,\n  \"5D\": 5,\n  \"1M\": 30,\n  \"3M\": 90,\n  \"6M\": 180,\n  \"1Y\": 360,\n  ALL: \"max\",\n};\ninterface TimeRangeSelectionProps {\n  selectedDayRange: HistoricalDaysRange;\n  onSelectionChanged(selectedInterval: HistoricalDaysRange): void;\n}\nexport const ChartTimeRangeSelection: FC<TimeRangeSelectionProps> = (props) => {\n  return (\n    <TimeRangeSelectionWrapper>\n      {typedObjectEntries(historicalDaysRange).map(\n        ([intervalLabel, intervalValue]) => (\n          <TimeRangeSelectionItem\n            key={intervalLabel}\n            onClick={() => props.onSelectionChanged(intervalValue)}\n            className={\n              intervalValue === props.selectedDayRange ? \"selected\" : undefined\n            }\n          >\n            {intervalLabel}\n          </TimeRangeSelectionItem>\n        ),\n      )}\n    </TimeRangeSelectionWrapper>\n  );\n};\n","import { useEffect } from \"react\";\nimport { fromEventPattern, merge } from \"rxjs\";\nimport { NodeEventHandler } from \"rxjs/internal/observable/fromEvent\";\nimport { map } from \"rxjs/operators\";\nimport { theme, Theme } from \"../../theme/theme\";\nimport { getSafeNumber } from \"../safeGetters\";\n\nexport interface MediaQueryMatch {\n  matches: boolean /*matches is false when expanding screen size */;\n  matchingScreenSize?: ScreenSize;\n  numericScreenSize?: number;\n}\n\nexport const useMediaQueries = (\n  onMediaQueryChange: (match: MediaQueryMatch) => void,\n) => {\n  useEffect(() => {\n    const subscription = subscribeToMediaQueries$().subscribe(\n      onMediaQueryChange,\n    );\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [onMediaQueryChange]);\n};\n\n//HELPERS\n\ntype ScreenSize = Theme[\"screenSizes\"][keyof Theme[\"screenSizes\"]];\nconst screenSizes: ScreenSize[] = Object.values(theme.screenSizes);\n\nconst subscribeToMediaQuery$ = (query: string) => {\n  const mediaQuery = window.matchMedia(query);\n\n  const addChangeMediaHandler = (handler: NodeEventHandler) => {\n    mediaQuery.addEventListener(\"change\", handler);\n  };\n\n  const removeChangeMediaHandler = (handler: NodeEventHandler) => {\n    mediaQuery.removeEventListener(\"change\", handler);\n  };\n\n  return fromEventPattern<MediaQueryListEvent>(\n    addChangeMediaHandler,\n    removeChangeMediaHandler,\n  ).pipe<MediaQueryMatch>(\n    map(({ matches, media }) => {\n      const screenSize = getScreenSizeFromMediaQuery(media);\n      return {\n        matches,\n        matchingScreenSize: screenSize,\n        numericScreenSize: getNumericScreenSize(screenSize),\n      };\n    }),\n  );\n};\n\nconst subscribeToMediaQueries$ = () => {\n  const mediaQueries$ = screenSizes.map((width) =>\n    subscribeToMediaQuery$(`(max-width: ${width})`),\n  );\n\n  return merge(...mediaQueries$);\n};\n\nconst getScreenSizeFromMediaQuery = (query: string): ScreenSize | undefined => {\n  const screenSize = query.match(/\\d+px/)?.[0];\n  if (screenSize) {\n    return screenSize as ScreenSize;\n  }\n};\n\nexport const getNumericScreenSize = (screenSize: ScreenSize | undefined) =>\n  getSafeNumber(screenSize?.match(/\\d+/)?.[0]);\n","import { theme } from \"../theme/theme\";\nimport { getNumericScreenSize, MediaQueryMatch } from \"./hooks/useMediaQueries\";\nimport { isDefined } from \"./isDefined\";\n\nconst tabletSize = getNumericScreenSize(theme.screenSizes.tablet)!;\n\nconst isLessThan = (val1: number, val2: number) => val1 < val2;\n\n/**\n * determines if the (max-width: targetSize) media query is active\n * @param targetSize desired max-width; default is 768px\n * @returns\n *   true if screenSize is targetSize or smaller and\n *   false if screenSize is targetSize or larger\n */\nexport const isMediaQueryActive = (\n  mediaQueryMatch: MediaQueryMatch,\n  targetSize = tabletSize,\n) => {\n  if (isDefined(mediaQueryMatch.numericScreenSize)) {\n    const isActive =\n      mediaQueryMatch.numericScreenSize === targetSize\n        ? mediaQueryMatch.matches\n        : isLessThan(mediaQueryMatch.numericScreenSize, targetSize);\n    return isActive;\n  }\n  return false;\n};\n","import { useState, useCallback } from \"react\";\nimport { theme } from \"../../theme/theme\";\nimport { isDefined } from \"../isDefined\";\nimport { isMediaQueryActive } from \"../isMediaQueryActive\";\nimport {\n  getNumericScreenSize,\n  MediaQueryMatch,\n  useMediaQueries,\n} from \"./useMediaQueries\";\n\nconst tabletSize = getNumericScreenSize(theme.screenSizes.tablet)!;\n\nexport const useMediaQueryMatch = (targetSize = tabletSize) => {\n  const [isActive, setIsActive] = useState(window.innerWidth < targetSize);\n\n  const onMediaMatch = useCallback(\n    (match: MediaQueryMatch) => {\n      if (isDefined(match.numericScreenSize)) {\n        setIsActive(isMediaQueryActive(match, targetSize));\n      }\n    },\n    [targetSize],\n  );\n\n  useMediaQueries(onMediaMatch);\n\n  return isActive;\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst Wrapper = styled.div`\n  padding: 2rem 1rem;\n  text-align: center;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nexport const ChartErrorMessage: FC = (props) => {\n  return <Wrapper>{props.children}</Wrapper>;\n};\n","import styled from \"styled-components/macro\";\nimport { BaseWrapper } from \"../ContentWrappers\";\n\nexport const MainChartWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n  margin-top: 3rem;\n`;\n\nexport const ToolTipWrapper = styled(BaseWrapper)`\n  line-height: 1.5;\n  background-color: ${({ theme }) =>\n    `${theme.colors.secondaryDark}BB`}; //add opacity to background HEX color\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n  padding: 1rem;\n\n  span {\n    display: block;\n  }\n  .tooltip {\n    &__label {\n      font-size: ${({ theme }) => theme.fontSize.bodyXSmall};\n      opacity: ${({ theme }) => theme.opacityMuted};\n    }\n    &__value {\n      font-weight: bold;\n    }\n  }\n`;\n","import React, { ReactNode, useMemo } from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  TooltipProps,\n} from \"recharts\";\nimport { Payload } from \"recharts/types/component/DefaultTooltipContent\";\nimport { theme } from \"../../theme/theme\";\nimport { formatDateTime } from \"../../utils/formatters\";\nimport { useMediaQueryMatch } from \"../../utils/hooks/useMediaQueryMatch\";\nimport { getSafeMinMax } from \"../../utils/safeGetters\";\nimport { StringKey } from \"../../utils/types\";\nimport { ChartErrorMessage } from \"./ChartErrorMessage\";\nimport { MainChartWrapper, ToolTipWrapper } from \"./styled\";\n\ninterface ChartPayload<T extends Record<string, any>, K extends keyof T>\n  extends Payload<T[K], string> {\n  payload?: T;\n}\n\ntype ToolTipLabelFormatter<T, K extends keyof T> = (\n  label: string,\n  payload: ChartPayload<T, K>[],\n) => ReactNode;\ninterface ChartProps<\n  Data,\n  DataKey extends keyof Data,\n  XAxisKey extends keyof Data\n> {\n  chartData: Data[] | undefined;\n  dataKey: DataKey;\n  xAxisDataKey: XAxisKey;\n  valueFormatter(value?: Data[DataKey]): string;\n  xAxisLabelFormatter(label?: Data[XAxisKey]): string;\n  error?: string;\n}\n\nexport const Chart = <\n  Data extends Record<string, any>,\n  DataKey extends StringKey<Data>,\n  XAxisKey extends StringKey<Data>\n>(\n  props: ChartProps<Data, DataKey, XAxisKey>,\n) => {\n  const domain = useMemo(() => getSafeMinMax(props.chartData, props.dataKey), [\n    props.chartData,\n    props.dataKey,\n  ]);\n\n  const hideAxis = useMediaQueryMatch();\n\n  if (props.error) {\n    return <ChartErrorMessage>{props.error}</ChartErrorMessage>;\n  }\n\n  const toolTipLabelFormatter: ToolTipLabelFormatter<Data, DataKey> = (\n    label,\n    payload,\n  ) =>\n    payload?.map((value) =>\n      formatDateTime(value.payload?.[props.xAxisDataKey]),\n    );\n\n  return (\n    <MainChartWrapper>\n      <ResponsiveContainer width=\"100%\" aspect={2}>\n        <AreaChart\n          data={props.chartData}\n          margin={{\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: hideAxis ? 0 : 30,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"primary-gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop\n                offset=\"5%\"\n                stopColor={theme.colors.primary}\n                stopOpacity={0.8}\n              />\n              <stop\n                offset=\"95%\"\n                stopColor={theme.colors.primaryLight}\n                stopOpacity={0.1}\n              />\n            </linearGradient>\n          </defs>\n          <XAxis\n            dataKey={props.xAxisDataKey}\n            tickFormatter={props.xAxisLabelFormatter}\n            tickLine={false}\n            axisLine={false}\n            stroke={theme.colors.fontOnBackground}\n            opacity={theme.opacityDisabled}\n          />\n          <YAxis\n            type=\"number\"\n            domain={domain}\n            tickFormatter={props.valueFormatter}\n            tickLine={false}\n            axisLine={false}\n            stroke={theme.colors.fontOnBackground}\n            opacity={theme.opacityDisabled}\n            hide={hideAxis}\n          />\n          <Tooltip<Data[DataKey], string>\n            labelFormatter={toolTipLabelFormatter}\n            content={CustomTooltip}\n            formatter={(value: Data[DataKey]) => [\n              props.valueFormatter(value),\n              undefined,\n            ]}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey={props.dataKey}\n            stroke={theme.colors.primary}\n            fill=\"url(#primary-gradient)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </MainChartWrapper>\n  );\n};\n\nexport default Chart;\n\nconst CustomTooltip = <\n  Data extends Record<string, any>,\n  DataKey extends keyof Data\n>(\n  props: TooltipProps<Data[DataKey], string>,\n) => {\n  if (!props.active || !props.payload) {\n    return null;\n  }\n\n  return (\n    <ToolTipWrapper>\n      <span className=\"tooltip__label\">\n        {props.labelFormatter?.(props.label, props.payload)}\n      </span>\n      <span className=\"tooltip__value\">\n        {props.formatter?.(props.payload?.[0].value)}\n      </span>\n    </ToolTipWrapper>\n  );\n};\n","import React, { FC, useMemo, useEffect, useCallback } from \"react\";\nimport { HistoricalDaysRange } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { formatDate, formatDayTime, formatPrice } from \"../../utils/formatters\";\nimport { Chart } from \"../charts/Chart\";\nimport { LoadingSpinner } from \"../LoadingSpinner\";\nimport { historicalDaysRange } from \"./ChartTimeRangeSelection\";\nimport { useHistoricalPrice } from \"./useHistoricalPrice\";\n\nconst MemoizedChart = React.memo(Chart) as typeof Chart;\n\ninterface HistoricalPriceChartProps {\n  assetId: string;\n  selectedDayRange: HistoricalDaysRange;\n}\n\nexport const HistoricalPriceChart: FC<HistoricalPriceChartProps> = ({\n  selectedDayRange,\n  ...props\n}) => {\n  const {\n    assetPriceHistory,\n    getHistoricalData,\n    isBusy,\n    error,\n  } = useHistoricalPrice(props.assetId);\n\n  useEffect(() => {\n    getHistoricalData({ days: selectedDayRange });\n  }, [selectedDayRange, getHistoricalData]);\n\n  const chartData = useMemo(() => assetPriceHistory.get(selectedDayRange), [\n    assetPriceHistory,\n    selectedDayRange,\n  ]);\n\n  const labelFormatter = useCallback(\n    (time?: number) =>\n      selectedDayRange === historicalDaysRange[\"1D\"]\n        ? formatDayTime(time)\n        : formatDate(time),\n    [selectedDayRange],\n  );\n\n  return isBusy ? (\n    <LoadingSpinner />\n  ) : (\n    <MemoizedChart\n      chartData={chartData}\n      dataKey=\"price\"\n      xAxisDataKey=\"time\"\n      valueFormatter={formatPrice}\n      xAxisLabelFormatter={labelFormatter}\n      error={error}\n    />\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { AssetsService } from \"../../services/crypto_assets/AssetsService\";\nimport { useService } from \"../../utils/hooks/useService\";\nimport {\n  HistoricalAssetPriceRequest,\n  HistoricalDaysRange,\n  HistoricalPriceData,\n} from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { Map } from \"immutable\";\nimport { DEFAULT_CURRENCY } from \"../../utils/constants\";\n\nexport const useHistoricalPrice = (assetId: string) => {\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [assetPriceHistory, setAssetPriceHistory] = useState(\n    Map<HistoricalDaysRange, HistoricalPriceData[]>(),\n  );\n\n  const [setRequest, isBusy] = useService(\n    AssetsService.getHistoricalPriceData,\n    {\n      onResponse(response) {\n        setError(undefined);\n        setAssetPriceHistory((state) =>\n          state.set(response.days, response.historicalPriceData),\n        );\n      },\n      onError(err) {\n        const errorMessage = `Error getting ${assetId} historical prices`;\n        console.error(errorMessage, err);\n        setError(errorMessage);\n      },\n    },\n  );\n\n  const getHistoricalData = useCallback(\n    (request: Omit<HistoricalAssetPriceRequest, \"id\" | \"vs_currency\">) => {\n      setError(undefined);\n      setRequest({ ...request, id: assetId, vs_currency: DEFAULT_CURRENCY });\n    },\n    [setRequest, assetId],\n  );\n\n  return {\n    assetPriceHistory,\n    getHistoricalData,\n    isBusy,\n    error,\n  };\n};\n","import React, { FC, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { HistoricalDaysRange } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { CyrptoAssetFullDetails } from \"../crypto-assets/CryptoAssetFullDetails\";\nimport { CryptoAssetInfo } from \"../crypto-assets/CryptoAssetInfo\";\nimport {\n  ChartTimeRangeSelection,\n  historicalDaysRange,\n} from \"./ChartTimeRangeSelection\";\nimport { HistoricalPriceChart } from \"./HistoricalPriceChart\";\nimport { PriceActionWrapper } from \"./styled\";\n\nexport const PriceAction: FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [selectedDayRange, setDayRange] = useState<HistoricalDaysRange>(\n    historicalDaysRange[\"1D\"],\n  );\n\n  return (\n    <PriceActionWrapper>\n      <CryptoAssetInfo assetId={id} />\n      <ChartTimeRangeSelection\n        selectedDayRange={selectedDayRange}\n        onSelectionChanged={setDayRange}\n      />\n      <HistoricalPriceChart assetId={id} selectedDayRange={selectedDayRange} />\n      <CyrptoAssetFullDetails assetId={id} />\n    </PriceActionWrapper>\n  );\n};\n\nexport default PriceAction;\n"],"sourceRoot":""}