{"version":3,"sources":["components/charts/styled.tsx","components/charts/Chart.tsx","components/crypto-assets/CryptoAssetFullDetails.tsx","components/crypto-assets/CryptoAssetInfo.tsx","components/price-action/styled.tsx","components/price-action/ChartTimeRangeSelection.tsx","components/price-action/PriceAction.tsx","components/price-action/useHistoricalPrice.ts"],"names":["MainChartWrapper","styled","div","theme","colors","fontOnBackground","ToolTipWrapper","BaseWrapper","secondaryDark","fontSize","bodyXSmall","opacityMuted","Chart","props","domain","useMemo","getSafeMinMax","chartData","dataKey","ResponsiveContainer","width","aspect","AreaChart","data","margin","top","right","bottom","left","id","x1","y1","x2","y2","offset","stopColor","primary","stopOpacity","primaryLight","XAxis","xAxisDataKey","tickFormatter","xAxisLabelFormatter","tickLine","axisLine","stroke","opacity","opacityDisabled","YAxis","type","tickCount","valueFormatter","Tooltip","labelFormatter","label","payload","map","value","formatDateTime","content","CustomTooltip","formatter","undefined","Area","fill","active","className","Wrapper","DetailsWrapper","screenSizes","tablet","Row","CyrptoAssetFullDetails","asset","formatPrice","price","marketCap","rank","totalVolume","low24h","high24h","isDefined","allTimeHigh","parseDateString","allTimeHighDate","fullyDilutedValuation","formatQuantity","circulatingSupply","maxSupply","lastUpdated","ContentWrapper","MainSubContentWrapper","AssetNameWrapper","h4","CryptoAssetInfo","useContext","CryptoAssetContext","appState","usePricesFeed","assets","list","get","assetId","maxColumnSize","minColumnSize","src","image","alt","name","symbol","toUpperCase","color","getColorFromSign","priceChangePercent24h","formatPercent","PriceActionWrapper","TimeRangeSelectionWrapper","ul","border","TimeRangeSelectionItem","li","historicalDaysRange","ALL","ChartTimeRangeSelection","typedObjectEntries","intervalLabel","intervalValue","onClick","onSelectionChanged","selectedDayRange","MemoizedChart","React","memo","PriceAction","useParams","useState","setDayRange","Map","assetPriceHistory","setAssetPriceHistory","useService","AssetsService","getHistoricalPriceData","onResponse","response","state","set","days","historicalPriceData","onError","err","console","error","setRequest","isBusy","getHistoricalData","useCallback","request","vs_currency","DEFAULT_CURRENCY","useHistoricalPrice","useAssetDetailsService","getAsset","time","formatDayTime","formatWeekdayDate","useEffect","LoadingSpinner"],"mappings":"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","file":"static/js/4.e8892d0f.chunk.js","sourcesContent":["import styled from \"styled-components/macro\";\nimport { BaseWrapper } from \"../ContentWrappers\";\n\nexport const MainChartWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n  margin-top: 3rem;\n`;\n\nexport const ToolTipWrapper = styled(BaseWrapper)`\n  line-height: 1.5;\n  background-color: ${({ theme }) =>\n    `${theme.colors.secondaryDark}BB`}; //add opacity to background HEX color\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n  padding: 1rem;\n\n  span {\n    display: block;\n  }\n  .tooltip {\n    &__label {\n      font-size: ${({ theme }) => theme.fontSize.bodyXSmall};\n      opacity: ${({ theme }) => theme.opacityMuted};\n    }\n    &__value {\n      font-weight: bold;\n    }\n  }\n`;\n","import React, { ReactNode, useMemo } from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  TooltipProps,\n} from \"recharts\";\nimport { Payload } from \"recharts/types/component/DefaultTooltipContent\";\nimport { theme } from \"../../theme/theme\";\nimport { formatDateTime } from \"../../utils/formatters\";\nimport { getSafeMinMax } from \"../../utils/safeGetters\";\nimport { StringKey } from \"../../utils/types\";\nimport { MainChartWrapper, ToolTipWrapper } from \"./styled\";\n\ninterface ChartPayload<T extends Record<string, any>, K extends keyof T>\n  extends Payload<T[K], string> {\n  payload?: T;\n}\n\ntype ToolTipLabelFormatter<T, K extends keyof T> = (\n  label: string,\n  payload: ChartPayload<T, K>[],\n) => ReactNode;\ninterface ChartProps<\n  Data,\n  DataKey extends keyof Data,\n  XAxisKey extends keyof Data\n> {\n  chartData: Data[] | undefined;\n  dataKey: DataKey;\n  xAxisDataKey: XAxisKey;\n  valueFormatter(value?: Data[DataKey]): string;\n  xAxisLabelFormatter(label?: Data[XAxisKey]): string;\n}\n\nexport const Chart = <\n  Data extends Record<string, any>,\n  DataKey extends StringKey<Data>,\n  XAxisKey extends StringKey<Data>\n>(\n  props: ChartProps<Data, DataKey, XAxisKey>,\n) => {\n  const toolTipLabelFormatter: ToolTipLabelFormatter<Data, DataKey> = (\n    label,\n    payload,\n  ) =>\n    payload?.map((value) =>\n      formatDateTime(value.payload?.[props.xAxisDataKey]),\n    );\n\n  const domain = useMemo(() => getSafeMinMax(props.chartData, props.dataKey), [\n    props.chartData,\n    props.dataKey,\n  ]);\n  return (\n    <MainChartWrapper>\n      <ResponsiveContainer width=\"100%\" aspect={2}>\n        <AreaChart\n          data={props.chartData}\n          margin={{\n            top: 30,\n            right: 50,\n            bottom: 30,\n            left: 30,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"primary-gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop\n                offset=\"5%\"\n                stopColor={theme.colors.primary}\n                stopOpacity={0.8}\n              />\n              <stop\n                offset=\"95%\"\n                stopColor={theme.colors.primaryLight}\n                stopOpacity={0.1}\n              />\n            </linearGradient>\n          </defs>\n          <XAxis\n            dataKey={props.xAxisDataKey}\n            tickFormatter={props.xAxisLabelFormatter}\n            tickLine={false}\n            axisLine={false}\n            stroke={theme.colors.fontOnBackground}\n            opacity={theme.opacityDisabled}\n          />\n          <YAxis\n            type=\"number\"\n            domain={domain}\n            tickCount={8}\n            tickFormatter={props.valueFormatter}\n            tickLine={false}\n            axisLine={false}\n            stroke={theme.colors.fontOnBackground}\n            opacity={theme.opacityDisabled}\n          />\n          <Tooltip<Data[DataKey], string>\n            labelFormatter={toolTipLabelFormatter}\n            content={CustomTooltip}\n            formatter={(value: Data[DataKey]) => [\n              props.valueFormatter(value),\n              undefined,\n            ]}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey={props.dataKey}\n            stroke={theme.colors.primary}\n            fill=\"url(#primary-gradient)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </MainChartWrapper>\n  );\n};\n\nexport default Chart;\n\nconst CustomTooltip = <\n  Data extends Record<string, any>,\n  DataKey extends keyof Data\n>(\n  props: TooltipProps<Data[DataKey], string>,\n) => {\n  if (!props.active || !props.payload) {\n    return null;\n  }\n\n  return (\n    <ToolTipWrapper>\n      <span className=\"tooltip__label\">\n        {props.labelFormatter?.(props.label, props.payload)}\n      </span>\n      <span className=\"tooltip__value\">\n        {props.formatter?.(props.payload?.[0].value)}\n      </span>\n    </ToolTipWrapper>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport {\n  formatPrice,\n  formatQuantity,\n  parseDateString,\n} from \"../../utils/formatters\";\nimport { isDefined } from \"../../utils/isDefined\";\n\ninterface Props {\n  asset?: CryptoAsset;\n}\n\nconst Wrapper = styled.div`\n  padding-top: 3rem;\n`;\n\nconst DetailsWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  row-gap: 1rem;\n  column-gap: 6rem;\n\n  @media (max-width: ${({ theme }) => theme.screenSizes.tablet}) {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n`;\nconst Row = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  .value,\n  .label {\n    text-transform: capitalize;\n  }\n  .value {\n    font-weight: bold;\n    &--small {\n      font-size: ${({ theme }) => theme.fontSize.bodyXSmall};\n      opacity: ${({ theme }) => theme.opacityMuted};\n    }\n  }\n  .label {\n    opacity: ${({ theme }) => theme.opacityMuted};\n  }\n`;\n\nexport const CyrptoAssetFullDetails: FC<Props> = ({ asset, ...props }) => {\n  if (!asset) {\n    return null;\n  }\n\n  return (\n    <Wrapper>\n      <DetailsWrapper>\n        <Row>\n          <span className=\"label\">Current Price</span>\n          <span className=\"value\">{formatPrice(asset.price)}</span>\n        </Row>\n        <Row>\n          <span className=\"label\">Market Cap</span>\n          <span className=\"value\">{formatPrice(asset.marketCap)}</span>\n        </Row>\n        <Row>\n          <span className=\"label\">Market Cap Rank</span>\n          <span className=\"value\">{asset.rank}</span>\n        </Row>\n        <Row>\n          <span className=\"label\">Trading Volume</span>\n          <span className=\"value\">{formatPrice(asset.totalVolume)}</span>\n        </Row>\n        <Row>\n          <span className=\"label\">24h Low / 24h High</span>\n          <span className=\"value\">{`${formatPrice(\n            asset.low24h,\n          )} / ${formatPrice(asset.high24h)}`}</span>\n        </Row>\n        <Row>\n          <span className=\"label\">24h Low / 24h High</span>\n          <span className=\"value\">{`${formatPrice(\n            asset.low24h,\n          )} / ${formatPrice(asset.high24h)}`}</span>\n        </Row>\n        {isDefined(asset.allTimeHigh) && (\n          <Row>\n            <span className=\"label\">All-Time High</span>\n            <span>\n              <span className=\"value\">{formatPrice(asset.allTimeHigh)} </span>\n              <span className=\"value--small\">\n                ({parseDateString(asset.allTimeHighDate)})\n              </span>\n            </span>\n          </Row>\n        )}\n        <Row>\n          <span className=\"label\">Fully Diluted Valuation</span>\n          <span className=\"value\">\n            {formatPrice(asset.fullyDilutedValuation)}\n          </span>\n        </Row>\n        <Row>\n          <span className=\"label\">Circulating Supply</span>\n          <span className=\"value\">\n            {formatQuantity(asset.circulatingSupply)}\n          </span>\n        </Row>\n        <Row>\n          <span className=\"label\">Max Supply</span>\n          <span className=\"value\">{formatQuantity(asset.maxSupply)}</span>\n        </Row>\n        <Row>\n          <span className=\"label\">Last Updated</span>\n          <span className=\"value\">{parseDateString(asset.lastUpdated)}</span>\n        </Row>\n      </DetailsWrapper>\n    </Wrapper>\n  );\n};\n","import React, { FC, useContext } from \"react\";\nimport styled from \"styled-components/macro\";\nimport {\n  formatPercent,\n  formatPrice,\n  getColorFromSign,\n} from \"../../utils/formatters\";\nimport { usePricesFeed } from \"../../utils/hooks/useFeedService\";\nimport { ContentWrapper, MainSubContentWrapper } from \"../ContentWrappers\";\nimport { CryptoAssetContext } from \"../context/CryptoAssetContext\";\nimport { PercentChange } from \"./styled\";\n\ninterface CryptoAssetInfoProps {\n  assetId: string;\n}\n\nconst Wrapper = styled(ContentWrapper)`\n  place-content: unset;\n\n  ${MainSubContentWrapper} {\n    text-align: left;\n    width: fit-content;\n    &.numeric-content {\n      text-align: right;\n    }\n  }\n`;\n\nconst AssetNameWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  img {\n    height: ${({ theme }) => theme.fontSize.h4};\n    width: ${({ theme }) => theme.fontSize.h4};\n  }\n`;\n\nexport const CryptoAssetInfo: FC<CryptoAssetInfoProps> = (props) => {\n  const [appState] = useContext(CryptoAssetContext);\n  usePricesFeed();\n\n  const asset = appState.assets?.list.get(props.assetId);\n\n  return (\n    <Wrapper maxColumnSize=\"15rem\" minColumnSize=\"20rem\">\n      <AssetNameWrapper>\n        <img src={asset?.image} alt={asset?.name} />\n        <MainSubContentWrapper>\n          <span className=\"content__main--large content-name\">\n            {asset?.name}\n          </span>\n          <span className=\"content__sub\">{asset?.symbol.toUpperCase()}</span>\n        </MainSubContentWrapper>\n      </AssetNameWrapper>\n      <MainSubContentWrapper className=\"numeric-content\">\n        <span className=\"content__main--large\">\n          {formatPrice(asset?.price)}\n        </span>\n        <span>\n          <PercentChange color={getColorFromSign(asset?.priceChangePercent24h)}>\n            {formatPercent(asset?.priceChangePercent24h)}\n          </PercentChange>\n          <span className=\"content__sub\"> (24h Change)</span>\n        </span>\n      </MainSubContentWrapper>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const PriceActionWrapper = styled.div`\n  width: 100%;\n  max-width: 70rem;\n  margin: 0 auto;\n`;\n\nexport const TimeRangeSelectionWrapper = styled.ul`\n  list-style: none;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  border-bottom: solid 1px ${({ theme }) => theme.colors.border};\n`;\n\nexport const TimeRangeSelectionItem = styled.li`\n  text-align: center;\n  width: 4rem;\n  padding-bottom: 1.5rem;\n  transition: all 200ms;\n  margin: 0 0.5rem;\n  margin-bottom: -1px;\n  border-bottom: solid 1px transparent;\n  opacity: ${({ theme }) => theme.opacityMuted};\n\n  &.selected,\n  &:hover {\n    opacity: 1;\n    border-bottom-color: ${({ theme }) => theme.colors.primary};\n    color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:hover {\n    cursor: default;\n  }\n`;\n","import React, { FC } from \"react\";\nimport { HistoricalDaysRange } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { typedObjectEntries } from \"../../utils/typedObjectEntries\";\nimport { TimeRangeSelectionItem, TimeRangeSelectionWrapper } from \"./styled\";\n\ntype HistoricalDaysRangeLabel = \"1D\" | \"5D\" | \"1M\" | \"3M\" | \"6M\" | \"1Y\" | \"ALL\";\n\ntype Intervals = {\n  [interval in HistoricalDaysRangeLabel]: HistoricalDaysRange;\n};\n\nexport const historicalDaysRange: Intervals = {\n  \"1D\": 1,\n  \"5D\": 5,\n  \"1M\": 30,\n  \"3M\": 90,\n  \"6M\": 180,\n  \"1Y\": 360,\n  ALL: \"max\",\n};\ninterface TimeRangeSelectionProps {\n  selectedDayRange: HistoricalDaysRange;\n  onSelectionChanged(selectedInterval: HistoricalDaysRange): void;\n}\nexport const ChartTimeRangeSelection: FC<TimeRangeSelectionProps> = (props) => {\n  return (\n    <TimeRangeSelectionWrapper>\n      {typedObjectEntries(historicalDaysRange).map(\n        ([intervalLabel, intervalValue]) => (\n          <TimeRangeSelectionItem\n            key={intervalLabel}\n            onClick={() => props.onSelectionChanged(intervalValue)}\n            className={\n              intervalValue === props.selectedDayRange ? \"selected\" : undefined\n            }\n          >\n            {intervalLabel}\n          </TimeRangeSelectionItem>\n        ),\n      )}\n    </TimeRangeSelectionWrapper>\n  );\n};\n","import React, { FC, useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { HistoricalDaysRange } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport {\n  formatDayTime,\n  formatPrice,\n  formatWeekdayDate,\n} from \"../../utils/formatters\";\nimport { Chart } from \"../charts/Chart\";\nimport { CyrptoAssetFullDetails } from \"../crypto-assets/CryptoAssetFullDetails\";\nimport { CryptoAssetInfo } from \"../crypto-assets/CryptoAssetInfo\";\nimport { useAssetDetailsService } from \"../crypto-assets/useAssetsService\";\nimport { LoadingSpinner } from \"../LoadingSpinner\";\nimport {\n  ChartTimeRangeSelection,\n  historicalDaysRange,\n} from \"./ChartTimeRangeSelection\";\nimport { PriceActionWrapper } from \"./styled\";\nimport { useHistoricalPrice } from \"./useHistoricalPrice\";\n\nconst MemoizedChart = React.memo(Chart) as typeof Chart;\n\nconst valueFormatter = (value?: number) => formatPrice(value, 3);\n\nexport const PriceAction: FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const [selectedDayRange, setDayRange] = useState<HistoricalDaysRange>(\n    historicalDaysRange[\"1D\"],\n  );\n  const { assetPriceHistory, getHistoricalData, isBusy } = useHistoricalPrice(\n    id,\n  );\n  const { getAsset, asset } = useAssetDetailsService(id);\n\n  const labelFormatter = useCallback(\n    (time?: number) =>\n      selectedDayRange === historicalDaysRange[\"1D\"]\n        ? formatDayTime(time)\n        : formatWeekdayDate(time),\n    [selectedDayRange],\n  );\n  useEffect(() => {\n    getAsset();\n  }, [getAsset]);\n\n  useEffect(() => {\n    getHistoricalData({ days: selectedDayRange });\n  }, [selectedDayRange, getHistoricalData]);\n\n  const chartData = useMemo(() => assetPriceHistory.get(selectedDayRange), [\n    assetPriceHistory,\n    selectedDayRange,\n  ]);\n\n  return (\n    <PriceActionWrapper>\n      <CryptoAssetInfo assetId={id} />\n      <ChartTimeRangeSelection\n        selectedDayRange={selectedDayRange}\n        onSelectionChanged={setDayRange}\n      />\n      {isBusy ? (\n        <LoadingSpinner />\n      ) : (\n        <MemoizedChart\n          chartData={chartData}\n          dataKey=\"price\"\n          xAxisDataKey=\"time\"\n          valueFormatter={valueFormatter}\n          xAxisLabelFormatter={labelFormatter}\n        />\n      )}\n      <CyrptoAssetFullDetails asset={asset} />\n    </PriceActionWrapper>\n  );\n};\n\nexport default PriceAction;\n","import { useCallback, useState } from \"react\";\nimport { AssetsService } from \"../../services/crypto_assets/AssetsService\";\nimport { useService } from \"../../utils/hooks/useService\";\nimport {\n  HistoricalAssetPriceRequest,\n  HistoricalDaysRange,\n  HistoricalPriceData,\n} from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { Map } from \"immutable\";\nimport { DEFAULT_CURRENCY } from \"../../utils/constants\";\n\nexport const useHistoricalPrice = (assetId: string) => {\n  const [assetPriceHistory, setAssetPriceHistory] = useState(\n    Map<HistoricalDaysRange, HistoricalPriceData[]>(),\n  );\n\n  const [setRequest, isBusy] = useService(\n    AssetsService.getHistoricalPriceData,\n    {\n      onResponse(response) {\n        setAssetPriceHistory((state) =>\n          state.set(response.days, response.historicalPriceData),\n        );\n      },\n      onError(err) {\n        console.error(`Error getting ${assetId} historical prices`, err);\n      },\n    },\n  );\n\n  const getHistoricalData = useCallback(\n    (request: Omit<HistoricalAssetPriceRequest, \"id\" | \"vs_currency\">) => {\n      setRequest({ ...request, id: assetId, vs_currency: DEFAULT_CURRENCY });\n    },\n    [setRequest, assetId],\n  );\n\n  return {\n    assetPriceHistory,\n    getHistoricalData,\n    isBusy,\n  };\n};\n"],"sourceRoot":""}