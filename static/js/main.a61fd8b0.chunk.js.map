{"version":3,"sources":["components/market-metrics/state/MarketMetricsActions.ts","logo.svg","components/header/Logo.tsx","components/header/NavLink.tsx","components/header/NavigationHeader.tsx","utils/routes/paths.ts","utils/columnDefinitions.ts","components/grid/styled.ts","components/grid/GridRowsOverlay.tsx","components/grid/Grid.tsx","components/crypto-assets/CryptoNameCell.tsx","components/crypto-assets/cryptoAssetsColDefs.ts","components/crypto-assets/CryptoAssetsGrid.tsx","components/market-metrics/state/marketMetricsReducer.ts","components/market-metrics/MarketMetrics.tsx","components/market-metrics/useMarketMetrics.ts","components/overview/MarketOverview.tsx","App.tsx","index.tsx","utils/safeGetters.ts","components/crypto-assets/state/AssetActions.ts","components/context/AppState.ts","utils/formatters.ts","utils/constants.ts","components/ContentWrappers.tsx","utils/arrayToMap.ts","components/crypto-assets/state/assetsReducer.ts","components/context/appReducer.ts","components/context/CryptoAssetContext.tsx","utils/hooks/ServiceActions.ts","utils/hooks/useService.ts","services/connection/AjaxConnection.ts","services/crypto_assets/AssetsService.ts","services/connection/apis.ts","utils/parseJson.ts","services/connection/connectionHelpers.ts","theme/theme.ts","utils/typedObjectEntries.ts","components/crypto-assets/useAssetsService.ts","utils/isDefined.ts","components/crypto-assets/styled.tsx","components/LoadingSpinner.tsx","services/feeds/FeedService.ts","services/connection/websocketConnection.ts","utils/hooks/useFeedService.ts"],"names":["MarketMetricsActionTypes","LogoWrapper","styled","img","Logo","props","src","logo","alt","onClick","NavItemWrapper","div","theme","colors","fontOnBackground","opacityMuted","primaryLight","NavLink","className","useRouteMatch","path","to","exact","undefined","children","NavBarWrapper","border","backgroundDark","NavBar","nav","NavigationHeader","history","useHistory","push","PRICE_ACTION_PATH","numericColDef","type","comparator","valueA","valueB","isDefined","minWidth","priceColDef","valueFormatter","value","formatPrice","integerPriceColDef","formatIntegerPrice","percentColDef","percentA","getSafeNumber","percentB","formatPercent","cellClassRules","params","quantityColDef","formatQuantity","defaultColDefs","resizable","floatingFilter","sortable","suppressMovable","icons","sortAscending","sortDescending","first","previous","next","last","GridWrapper","css","secondaryDark","backgroundLight","backgroundLightMuted","focus","secondary","red","green","fontSize","body","ErrorWrapper","BaseWrapper","NoRowsOverlay","message","noRowsMessage","isError","getNoRowsMessage","loading","error","Grid","columnDefs","suppressDragLeaveHidesColumns","immutableData","defaultColDef","noRowsOverlayComponentFramework","noRowsOverlayComponentParams","Boolean","map","colDef","colId","NameCellWrapper","CryptoNameCell","forwardRef","ref","useImperativeHandle","refresh","image","name","symbol","assetColDefs","width","field","headerName","initialSort","valueGetter","data","getSafeString","localeCompare","numeric","stringCompare","cellRendererFramework","AssetGridWrapper","getRowNodeId","row","id","CryptoAssetsGrid","useAssetsService","assets","status","getAssets","usePricesFeed","useEffect","per_page","page","vs_currency","DEFAULT_CURRENCY","rowData","useMemo","valueSeq","toArray","StateFetchStatus","Busy","onRowClicked","event","initialMarketMetricsState","Idle","marketMetricsReducer","state","action","GET_GLOBAL_METRICS_REQUEST","GET_GLOBAL_METRICS_SUCCESS","payload","GET_GLOBAL_METRICS_FAILURE","Failure","MarketMetrics","marketMetrics","useReducer","marketMetricsState","dispatch","useService","AssetsService","getGlobalMarketData","onResponse","response","onError","getMarketMetrics","useMarketMetrics","percentChangeUsd","marketCapChangePercentage24hUsd","totalMarketCap","totalMarketCapUsd","bitcoinDominance","marketCapPercentage","maxColumnSize","minColumnSize","color","getColorFromSign","MarketOverview","PriceAction","React","lazy","AppWrapper","screenSizes","desktop","mobileS","bodySmall","background","App","CryptoAssetContext","fallback","LoadingSpinner","pathname","DEFAULT_ASSET_ID","ReactDOM","render","StrictMode","document","getElementById","number","parseFloat","isNumber","String","getSafeMinMax","values","key","numericValues","filter","max","Math","min","getSafeDate","date","Date","e","AssetActionTypes","DEFAULT_LOCALE","TIME_FORMAT","DAY_DATE_FORMAT","DAY_TIME_FORMAT","DATETIME_FORMAT","formatNumber","options","locale","Intl","NumberFormat","format","safelyFormatNumber","num","price","decimalPlaces","style","currency","toUpperCase","maximumFractionDigits","minimumFractionDigits","percent","quantity","safeDateFormat","timestamp","formatTemplate","milliseconds","formatWeekdayDate","formatDateTime","formatDayTime","parseDateString","safeDate","borderRadius","boxShadow","ContentWrapper","MainSubContentWrapper","bodyXSmall","h6","arrayToMap","array","Map","val","initalState","list","OrderedMap","assetsReducer","GET_ASSETS_REQUEST","GET_ASSETS_SUCCESS","merge","GET_ASSETS_FAILURE","UPDATE_ASSET","update","prev","removeUndefinedEntries","appReducer","initialState","createContext","CryptoAssetContextProvider","reducer","Provider","UseServiceActionsTypes","initialServiceState","serviceReducer","FETCH_REQUEST","request","RESET","service","handlers","serviceState","handlersRef","useRef","current","subscription","subscribe","nextValue","complete","unsubscribe","console","useCallback","RequestMethod","AjaxConnection","endpoint","method","GET","getRequestParams","url","initRequest","fromFetch","pipe","switchMap","ok","json","Error","ASSETS_PATH","assetsApi","MARKET_METRICS_PATH","getCryptoAssets","asset","current_price","marketCap","market_cap","rank","market_cap_rank","fullyDilutedValuation","fully_diluted_valuation","totalVolume","total_volume","high24h","high_24h","low24h","low_24h","priceChange24h","price_change_24h","priceChangePercent24h","price_change_percentage_24h","priceChangePercent1h","price_change_percentage_1h_in_currency","marketCapChange24h","market_cap_change_24h","marketCapChangePercent24h","market_cap_change_percentage_24h","circulatingSupply","circulating_supply","totalSupply","total_supply","maxSupply","max_supply","lastUpdated","last_updated","retry","total_market_cap","totalVolumeUsd","market_cap_percentage","market_cap_change_percentage_24h_usd","updatedAt","updated_at","getHistoricalPriceData","prices","historicalPriceData","time","days","getAssetDetails","small","market_data","usd","priceChangePercentage7d","price_change_percentage_7d","priceChangePercentage14d","price_change_percentage_14d","priceChangePercentage30d","price_change_percentage_30d","priceChangePercentage60d","price_change_percentage_60d","priceChangePercentage200d","price_change_percentage_200d","priceChangePercentage1y","price_change_percentage_1y","blockTimeInMinutes","block_time_in_minutes","categories","description","en","homepageLink","links","homepage","find","genesisDate","genesis_date","totalValueLocked","total_value_locked","mcapToTotalValueLockedRatio","mcap_to_tvl_ratio","allTimeHigh","ath","allTimeHighDate","ath_date","process","pricesStreamApi","jsonToString","JSON","stringify","err","parseJson","parse","parseStringParams","Array","isArray","Object","entries","reduce","stringParams","validRequest","getValidRequest","encodeURI","parseUrl","headers","Headers","set","POST","getInitRequest","length","backgroundMuted","fontOnBackgroundLight","fontOnBackgroundDark","fontOnPrimary","fontOnPrimaryLight","fontOnPrimaryDark","primary","primaryDark","secondaryLight","borderMuted","opacityDisabled","h1","h2","h3","h4","h5","mobileM","mobileL","tablet","laptop","laptopL","typedObjectEntries","obj","validEntries","fromEntries","useContext","appState","setRequest","useAssetDetailsService","assetId","getAsset","get","Number","isFinite","PercentChange","span","SpinnerWrapper","Spinner","PRICES_PATH","mapAssetPriceToPriceUpdate","priceUsd","FeedService","webSocket","deserializer","openObserver","info","closeObserver","closeEvent","warn","code","webSocketConnection","throttleTime","mergeMap","retryWhen","errors","tap","log","delay","keySeq","prevAssets","subscribeToFeed","stringAssets"],"mappings":"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","file":"static/js/main.a61fd8b0.chunk.js","sourcesContent":["import { FluxStandardAction } from \"../../context/AppActions\";\nimport { GlobalMarketMetrics } from \"../../../services/crypto_assets/AssetsServiceInterface\";\n\nexport enum MarketMetricsActionTypes {\n  GET_GLOBAL_METRICS_REQUEST = \"GET_GLOBAL_METRICS_REQUEST\",\n  GET_GLOBAL_METRICS_SUCCESS = \"GET_GLOBAL_METRICS_SUCCESS\",\n  GET_GLOBAL_METRICS_FAILURE = \"GET_GLOBAL_METRICS_FAILURE\",\n}\n\ninterface GetGlobalMetricsRequestAction\n  extends FluxStandardAction<MarketMetricsActionTypes> {\n  type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_REQUEST;\n}\n\ninterface GetGlobalMetricsSuccessAction\n  extends FluxStandardAction<MarketMetricsActionTypes> {\n  type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_SUCCESS;\n  payload: GlobalMarketMetrics;\n}\n\ninterface GetGlobalMetricsFailureAction\n  extends FluxStandardAction<MarketMetricsActionTypes> {\n  type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_FAILURE;\n  payload: string;\n  error: boolean;\n}\n\nexport type MarketMetricActions =\n  | GetGlobalMetricsRequestAction\n  | GetGlobalMetricsSuccessAction\n  | GetGlobalMetricsFailureAction;\n","export default __webpack_public_path__ + \"static/media/logo.8ddc634a.svg\";","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport logo from \"../../logo.svg\";\n\nexport const LogoWrapper = styled.img`\n  height: 2rem;\n`;\n\ninterface Props {\n  onClick?: VoidFunction;\n}\nexport const Logo = (props: Props) => {\n  return <LogoWrapper src={logo} alt=\"logo\" onClick={props.onClick} />;\n};\n","import React, { FC } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport styled from \"styled-components/macro\";\n\nexport const NavItemWrapper = styled.div`\n  background-color: transparent;\n  padding: 0rem 0.5rem;\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n  opacity: ${({ theme }) => theme.opacityMuted};\n  white-space: nowrap;\n  transition: all 200ms;\n  border-bottom: solid 1px transparent;\n  margin-bottom: -1px;\n\n  a {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    color: inherit;\n    text-decoration: none;\n  }\n\n  &.nav-link--active,\n  &:focus,\n  &:hover {\n    border-bottom-color: ${({ theme }) => theme.colors.primaryLight};\n    opacity: 1;\n    cursor: pointer;\n  }\n`;\n\ninterface NavLinkProps {\n  to: string;\n  exact?: boolean;\n}\n\nexport const NavLink: FC<NavLinkProps> = (props) => {\n  const match = useRouteMatch({\n    path: props.to,\n    exact: props.exact,\n  });\n  const className = match ? \"nav-link--active\" : undefined;\n\n  return (\n    <NavItemWrapper className={className}>\n      <Link to={props.to}>{props.children}</Link>\n    </NavItemWrapper>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nimport styled from \"styled-components/macro\";\nimport { Logo, LogoWrapper } from \"./Logo\";\nimport { NavItemWrapper, NavLink } from \"./NavLink\";\n\nconst NavBarWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  align-items: center;\n\n  padding: 0.5rem 1rem 0rem 1rem;\n\n  border-bottom: solid 1px ${({ theme }) => theme.colors.border};\n  background-color: ${({ theme }) => theme.colors.backgroundDark};\n\n  ${LogoWrapper} {\n    margin: 0.5rem 0;\n    padding-right: 1rem;\n  }\n`;\n\nconst NavBar = styled.nav`\n  display: flex;\n  justify-content: center;\n  height: 100%;\n\n  ${NavItemWrapper} {\n    &:not(:first-child) {\n      margin-left: 1rem;\n    }\n  }\n`;\n\nexport const NavigationHeader = () => {\n  const history = useHistory();\n  return (\n    <NavBarWrapper>\n      <Logo onClick={() => history.push(\"/\")} />\n      <NavBar>\n        <NavLink to=\"/\" exact={true}>\n          Overview\n        </NavLink>\n        <NavLink to=\"/price-action\">Price Action</NavLink>\n      </NavBar>\n    </NavBarWrapper>\n  );\n};\n","export const PRICE_ACTION_PATH = \"/price-action/\";\n","import { ColDef } from \"ag-grid-community\";\nimport {\n  formatIntegerPrice,\n  formatPercent,\n  formatPrice,\n  formatQuantity,\n} from \"./formatters\";\nimport { isDefined } from \"./isDefined\";\nimport { getSafeNumber, getSafeString } from \"./safeGetters\";\n\nexport const stringCompare = (valueA?: string, valueB?: string) => {\n  return getSafeString(valueA).localeCompare(getSafeString(valueB), \"en\", {\n    numeric: true,\n  });\n};\n\nexport const numericCompare = (valueA?: number, valueB?: number) => {\n  if (!isDefined(valueA)) {\n    return 1;\n  }\n  if (!isDefined(valueB)) {\n    return -1;\n  }\n  return valueA - valueB;\n};\n\nexport const percentComparator = (valueA: any, valueB: any) => {\n  const percentA = getSafeNumber(valueA);\n  const percentB = getSafeNumber(valueB);\n\n  if (!isDefined(percentA)) {\n    return -1;\n  }\n\n  if (!isDefined(percentB)) {\n    return 1;\n  }\n\n  return percentA - percentB;\n};\n\nexport const numericColDef: ColDef = {\n  type: \"numericColumn\",\n  comparator: numericCompare,\n  minWidth: 60,\n};\n\nexport const priceColDef: ColDef = {\n  ...numericColDef,\n  valueFormatter({ value }) {\n    return formatPrice(value, 3);\n  },\n};\n\nexport const integerPriceColDef: ColDef = {\n  ...priceColDef,\n  valueFormatter({ value }) {\n    return formatIntegerPrice(value);\n  },\n};\n\nexport const percentColDef: ColDef = {\n  ...numericColDef,\n  comparator: percentComparator,\n  valueFormatter({ value }) {\n    return formatPercent(value);\n  },\n  cellClassRules: {\n    \"negative-value \": (params: { value?: string }) =>\n      (getSafeNumber(params.value) ?? 0) < 0,\n    \"positive-value \": (params: { value?: string }) =>\n      (getSafeNumber(params.value) ?? 0) > 0,\n  },\n};\n\nexport const quantityColDef: ColDef = {\n  ...numericColDef,\n  valueFormatter({ value }) {\n    return formatQuantity(value);\n  },\n};\n\nexport const defaultColDefs: ColDef = {\n  resizable: false,\n  floatingFilter: false,\n  sortable: true,\n  suppressMovable: true,\n  icons: {\n    sortAscending: '<span class=\"material-icons\">arrow_upward</span>',\n    sortDescending: '<span class=\"material-icons\">arrow_downward</span>',\n    first: '<span class=\"material-icons\">first_page</span>',\n    previous: '<span class=\"material-icons\">arrow_back_ios</span>',\n    next: '<span class=\"material-icons\">arrow_forward_ios</span>',\n    last: '<span class=\"material-icons\">last_page</span>',\n  },\n};\n","import styled, { css } from \"styled-components/macro\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\n\nexport const textEllipsisStyle = css`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nexport const GridWrapper = styled.div`\n  height: 100%;\n\n  //GLOBAL\n  .ag-root-wrapper {\n    background-color: ${({ theme }) => theme.colors.secondaryDark};\n    color: ${({ theme }) => theme.colors.fontOnBackground};\n  }\n\n  .ag-right-aligned-cell {\n    text-align: right;\n  }\n\n  .ag-left-aligned-cell {\n    text-align: left;\n  }\n\n  .ag-body-viewport,\n  .ag-body-horizontal-scroll-viewport {\n    &::-webkit-scrollbar-track {\n      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n      border-radius: 0.75rem;\n      background-color: rgba(0, 0, 0, 0.9);\n    }\n\n    &::-webkit-scrollbar {\n      width: 0.875rem;\n      height: auto;\n      background-color: rgba(0, 0, 0, 0.9);\n    }\n\n    &::-webkit-scrollbar-thumb {\n      border-radius: 0.75rem;\n      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n      background-color: #484848;\n    }\n  }\n\n  //HEADER\n  .ag-header {\n    border-bottom: solid 1px ${({ theme }) => theme.colors.backgroundLight};\n    background-color: ${({ theme }) => theme.colors.backgroundLightMuted};\n  }\n\n  .ag-header-row {\n    font-weight: 700;\n    text-transform: uppercase;\n  }\n\n  .ag-header-cell,\n  .ag-cell {\n    padding-left: 1rem;\n    padding-right: 1rem;\n\n    &:focus {\n      border: solid 1px ${({ theme }) => theme.colors.focus};\n      outline: none;\n    }\n  }\n\n  .ag-header-cell {\n    &-resize {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      &::after {\n        content: \"\";\n        width: 2px;\n        height: 50%;\n        background-color: ${({ theme }) => theme.colors.border};\n      }\n    }\n  }\n\n  //ROW\n  .ag-row {\n    &:hover {\n      background-color: ${({ theme }) => theme.colors.secondary};\n    }\n  }\n\n  //CELL\n  .ag-cell {\n    line-height: 40px; //Default row height used to center text vertically\n\n    &.negative-value {\n      color: ${({ theme }) => theme.colors.red};\n    }\n    &.positive-value {\n      color: ${({ theme }) => theme.colors.green};\n    }\n  }\n\n  //ICONS\n  .ag-icon,\n  .ag-header-icon {\n    .material-icons {\n      font-size: ${({ theme }) => theme.fontSize.body};\n    }\n  }\n`;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { INoRowsOverlayParams } from \"ag-grid-community\";\nimport { BaseWrapper } from \"../ContentWrappers\";\n\ninterface Props extends INoRowsOverlayParams {\n  noRowsMessage: string;\n  isError: boolean;\n}\n\nconst ErrorWrapper = styled(BaseWrapper)`\n  padding: 3rem;\n  background-color: ${({ theme }) => theme.colors.backgroundLightMuted};\n  color: ${({ theme }) => theme.colors.red};\n`;\n\nexport const NoRowsOverlay: FC<Props> = (props) => {\n  const message = <span>{props.noRowsMessage}</span>;\n  return props.isError ? <ErrorWrapper>{message}</ErrorWrapper> : message;\n};\n","import React, { PropsWithChildren } from \"react\";\nimport { AgGridReact, AgGridColumn } from \"ag-grid-react\";\nimport { ColDef, GridOptions } from \"ag-grid-community\";\nimport { defaultColDefs } from \"../../utils/columnDefinitions\";\nimport { GridWrapper } from \"./styled\";\nimport { NoRowsOverlay } from \"./GridRowsOverlay\";\nimport { StringKey } from \"../../utils/types\";\n\nexport interface ColumnDefinition<T extends Record<string, any>>\n  extends ColDef {\n  colId: string | StringKey<T>;\n  field: StringKey<T>;\n}\n\ninterface GridProps<T> extends GridOptions {\n  rowData: T[] | undefined;\n  columnDefs: ColumnDefinition<T>[];\n  loading?: boolean;\n  error?: string;\n}\n\nconst getNoRowsMessage = (loading?: boolean, error?: string): string => {\n  if (loading) {\n    return \"Loading...\";\n  }\n\n  return error || \"No Rows To Show\";\n};\n\nexport const Grid = <T extends Record<string, any>>({\n  columnDefs,\n  children,\n  loading,\n  error,\n  ...props\n}: PropsWithChildren<GridProps<T>>) => {\n  return (\n    <GridWrapper className=\"ag-theme-alpine-dark\">\n      <AgGridReact\n        suppressDragLeaveHidesColumns={true}\n        immutableData={true}\n        defaultColDef={defaultColDefs}\n        noRowsOverlayComponentFramework={NoRowsOverlay}\n        noRowsOverlayComponentParams={{\n          noRowsMessage: getNoRowsMessage(loading, error),\n          isError: Boolean(error),\n        }}\n        {...props}\n      >\n        {columnDefs.map((colDef) => (\n          <AgGridColumn key={colDef.colId} {...colDef} />\n        ))}\n      </AgGridReact>\n    </GridWrapper>\n  );\n};\n","import { ICellRenderer, ICellRendererParams } from \"ag-grid-community\";\nimport { useImperativeHandle, forwardRef } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\n\nexport type CryptoNameValue = Pick<CryptoAsset, \"symbol\" | \"name\" | \"image\">;\ninterface CryptoNameCellProps extends ICellRendererParams {\n  value: CryptoNameValue;\n}\nconst NameCellWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 100%;\n\n  img {\n    height: 1rem;\n  }\n\n  .crypto-name--main {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    text-transform: uppercase;\n    padding-left: 0.5rem;\n  }\n`;\n\nexport const CryptoNameCell = forwardRef<ICellRenderer, CryptoNameCellProps>(\n  (props, ref) => {\n    useImperativeHandle(ref, () => ({\n      refresh() {\n        return true;\n      },\n    }));\n\n    return (\n      <NameCellWrapper>\n        <img src={props.value.image} alt={props.value.name} />\n        <span className=\"crypto-name--main\">{props.value.symbol}</span>\n      </NameCellWrapper>\n    );\n  },\n);\n","import {\n  integerPriceColDef,\n  numericColDef,\n  percentColDef,\n  priceColDef,\n  quantityColDef,\n  stringCompare,\n} from \"../../utils/columnDefinitions\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { ColumnDefinition } from \"../grid/Grid\";\nimport { CryptoNameCell, CryptoNameValue } from \"./CryptoNameCell\";\n\nexport const assetColDefs: ColumnDefinition<CryptoAsset>[] = [\n  {\n    ...numericColDef,\n    width: 80,\n    field: \"rank\",\n    colId: \"rank\",\n    headerName: \"#\",\n    initialSort: \"asc\",\n  },\n  {\n    field: \"name\",\n    colId: \"name\",\n    headerName: \"Name\",\n    valueGetter: ({ data }: { data: CryptoAsset }): CryptoNameValue => ({\n      symbol: data.symbol,\n      name: data.name,\n      image: data.image,\n    }),\n    comparator: (valueA: CryptoNameValue, valueB: CryptoNameValue) =>\n      stringCompare(valueA.symbol, valueB.symbol),\n    cellRendererFramework: CryptoNameCell,\n    width: 120,\n    minWidth: 60,\n  },\n  {\n    ...priceColDef,\n    width: 125,\n    field: \"price\",\n    colId: \"price\",\n    headerName: \"PRICE\",\n  },\n  {\n    ...percentColDef,\n    width: 100,\n    field: \"priceChangePercent24h\",\n    colId: \"priceChangePercent24h\",\n    headerName: \"24h %\",\n  },\n  {\n    ...integerPriceColDef,\n    width: 160,\n    field: \"totalVolume\",\n    colId: \"totalVolume\",\n    headerName: \"Total Volume\",\n  },\n  {\n    ...integerPriceColDef,\n    width: 180,\n    field: \"marketCap\",\n    colId: \"marketCap\",\n    headerName: \"Market Cap\",\n  },\n  {\n    ...quantityColDef,\n    width: 210,\n    field: \"circulatingSupply\",\n    colId: \"circulatingSupply\",\n    headerName: \"Circulating Supply\",\n  },\n  {\n    ...quantityColDef,\n    width: 150,\n    field: \"maxSupply\",\n    colId: \"maxSupply\",\n    headerName: \"Max Supply\",\n  },\n];\n","import React, { FC, useEffect, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components/macro\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { DEFAULT_CURRENCY } from \"../../utils/constants\";\nimport { usePricesFeed } from \"../../utils/hooks/useFeedService\";\nimport { PRICE_ACTION_PATH } from \"../../utils/routes/paths\";\nimport { GridRowClickedEvent } from \"../../utils/types\";\nimport { StateFetchStatus } from \"../context/AppState\";\nimport { Grid } from \"../grid/Grid\";\nimport { BaseWrapper } from \"../ContentWrappers\";\nimport { assetColDefs } from \"./cryptoAssetsColDefs\";\nimport { useAssetsService } from \"./useAssetsService\";\n\nconst AssetGridWrapper = styled(BaseWrapper)`\n  height: 70vh;\n  max-width: 79rem;\n  margin: 0 auto;\n`;\n\nconst getRowNodeId = (row: CryptoAsset) => row.id;\n\nexport const CryptoAssetsGrid: FC = (props) => {\n  const history = useHistory();\n  const { assets, status, error, getAssets } = useAssetsService();\n  usePricesFeed();\n\n  useEffect(() => {\n    getAssets({ per_page: 300, page: 1, vs_currency: DEFAULT_CURRENCY });\n  }, [getAssets]);\n\n  const rowData = useMemo(() => assets?.valueSeq().toArray(), [assets]);\n\n  return (\n    <AssetGridWrapper>\n      <Grid\n        rowData={rowData}\n        columnDefs={assetColDefs}\n        getRowNodeId={getRowNodeId}\n        error={error}\n        loading={status === StateFetchStatus.Busy}\n        onRowClicked={(event: GridRowClickedEvent<CryptoAsset>) => {\n          history.push(`${PRICE_ACTION_PATH}${event.data.id}`);\n        }}\n      />\n      {props.children}\n    </AssetGridWrapper>\n  );\n};\n","import { GlobalMarketMetrics } from \"../../../services/crypto_assets/AssetsServiceInterface\";\nimport { AppActions } from \"../../context/AppActions\";\nimport { StateFetchStatus } from \"../../context/AppState\";\nimport { MarketMetricsActionTypes } from \"./MarketMetricsActions\";\n\nexport interface GlobalMarketMetricsState extends Partial<GlobalMarketMetrics> {\n  status: StateFetchStatus;\n}\n\nexport const initialMarketMetricsState: GlobalMarketMetricsState = {\n  status: StateFetchStatus.Idle,\n};\n\nexport const marketMetricsReducer = (\n  state: GlobalMarketMetricsState = initialMarketMetricsState,\n  action: AppActions,\n): GlobalMarketMetricsState => {\n  switch (action.type) {\n    case MarketMetricsActionTypes.GET_GLOBAL_METRICS_REQUEST:\n      return { ...state, status: StateFetchStatus.Busy };\n    case MarketMetricsActionTypes.GET_GLOBAL_METRICS_SUCCESS:\n      return { ...state, ...action.payload, status: StateFetchStatus.Idle };\n    case MarketMetricsActionTypes.GET_GLOBAL_METRICS_FAILURE:\n      return { ...state, status: StateFetchStatus.Failure };\n    default:\n      return state;\n  }\n};\n","import React, { FC } from \"react\";\nimport {\n  formatPercent,\n  formatPrice,\n  getColorFromSign,\n} from \"../../utils/formatters\";\nimport { MainSubContentWrapper, ContentWrapper } from \"../ContentWrappers\";\nimport { PercentChange } from \"../crypto-assets/styled\";\nimport { useMarketMetrics } from \"./useMarketMetrics\";\n\nexport const MarketMetrics: FC = () => {\n  const { marketMetrics } = useMarketMetrics();\n  const percentChangeUsd = formatPercent(\n    marketMetrics?.marketCapChangePercentage24hUsd,\n  );\n  const totalMarketCap = formatPrice(marketMetrics?.totalMarketCapUsd);\n  const bitcoinDominance = formatPercent(\n    marketMetrics?.marketCapPercentage?.[\"btc\"],\n  );\n\n  return (\n    <ContentWrapper maxColumnSize=\"25rem\" minColumnSize=\"18rem\">\n      <MainSubContentWrapper>\n        <span className=\"content__sub\">Total Market Cap</span>\n        <span className=\"content__main--large\">\n          {totalMarketCap}\n          <wbr />\n          <PercentChange\n            color={getColorFromSign(\n              marketMetrics?.marketCapChangePercentage24hUsd,\n            )}\n          >\n            {percentChangeUsd}\n          </PercentChange>\n        </span>\n      </MainSubContentWrapper>\n      <MainSubContentWrapper>\n        <span className=\"content__sub\">Bitcoin Dominance</span>\n        <span className=\"content__main--large\">{bitcoinDominance}</span>\n      </MainSubContentWrapper>\n    </ContentWrapper>\n  );\n};\n","import { useReducer, useEffect } from \"react\";\nimport { AssetsService } from \"../../services/crypto_assets/AssetsService\";\nimport { useService } from \"../../utils/hooks/useService\";\nimport { MarketMetricsActionTypes } from \"./state/MarketMetricsActions\";\nimport {\n  initialMarketMetricsState,\n  marketMetricsReducer,\n} from \"./state/marketMetricsReducer\";\n\nexport const useMarketMetrics = () => {\n  const [marketMetricsState, dispatch] = useReducer(\n    marketMetricsReducer,\n    initialMarketMetricsState,\n  );\n\n  const [getMarketMetrics] = useService(AssetsService.getGlobalMarketData, {\n    onResponse(response) {\n      dispatch({\n        type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_SUCCESS,\n        payload: response,\n      });\n    },\n    onError() {\n      dispatch({\n        type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_FAILURE,\n        payload: \"Error getting global market data\",\n        error: true,\n      });\n    },\n  });\n\n  useEffect(() => {\n    dispatch({ type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_REQUEST });\n    getMarketMetrics(null);\n  }, [dispatch, getMarketMetrics]);\n\n  return {\n    marketMetrics: marketMetricsState,\n  };\n};\n","import React from \"react\";\nimport { CryptoAssetsGrid } from \"../crypto-assets/CryptoAssetsGrid\";\nimport { MarketMetrics } from \"../market-metrics/MarketMetrics\";\n\nexport const MarketOverview = () => {\n  return (\n    <>\n      <MarketMetrics />\n      <CryptoAssetsGrid />\n    </>\n  );\n};\n","import React, { Suspense } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components/macro\";\nimport \"./App.css\";\nimport { NavigationHeader } from \"./components/header/NavigationHeader\";\nimport { theme } from \"./theme/theme\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { CryptoAssetContextProvider } from \"./components/context/CryptoAssetContext\";\nimport { MarketOverview } from \"./components/overview/MarketOverview\";\nimport { PRICE_ACTION_PATH } from \"./utils/routes/paths\";\nimport { DEFAULT_ASSET_ID } from \"./utils/constants\";\nimport { LoadingSpinner } from \"./components/LoadingSpinner\";\nconst PriceAction = React.lazy(\n  () => import(\"./components/price-action/PriceAction\"),\n);\n\nconst AppWrapper = styled.div`\n  max-width: ${({ theme }) => theme.screenSizes.desktop};\n  min-width: ${({ theme }) => theme.screenSizes.mobileS};\n  margin: 0 auto;\n  height: 100%;\n  overflow: auto;\n  font-size: ${({ theme }) => theme.fontSize.bodySmall};\n  background: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n\n  main {\n    padding: 1rem;\n  }\n`;\n\nfunction App() {\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <AppWrapper>\n          <NavigationHeader />\n          <main>\n            <CryptoAssetContextProvider>\n              <Switch>\n                <Route path=\"/\" exact={true}>\n                  <MarketOverview />\n                </Route>\n                <Route path={`${PRICE_ACTION_PATH}:id`}>\n                  <Suspense fallback={<LoadingSpinner />}>\n                    <PriceAction />\n                  </Suspense>\n                </Route>\n                <Route path={`${PRICE_ACTION_PATH}`}>\n                  <Redirect\n                    to={{\n                      pathname: `${PRICE_ACTION_PATH}${DEFAULT_ASSET_ID}`,\n                    }}\n                  />\n                </Route>\n              </Switch>\n            </CryptoAssetContextProvider>\n          </main>\n        </AppWrapper>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n","import { isDefined, isNumber } from \"./isDefined\";\n\nexport const getSafeNumber = (value: any): number | undefined => {\n  const number = parseFloat(`${value}`);\n  if (isNumber(number)) {\n    return number;\n  }\n\n  return undefined;\n};\n\nexport const getSafeString = (value?: string | number): string => {\n  if (isDefined(value)) {\n    return typeof value === \"string\" ? value : String(value);\n  }\n\n  return \"\";\n};\n\nexport const getSafeMinMax = <T extends Record<string, any>, K extends keyof T>(\n  values: T[] | undefined,\n  key: K,\n): [number, number] | undefined => {\n  if (!isDefined(values)) {\n    return undefined;\n  }\n  const numericValues = values\n    .map((value) => getSafeNumber(value?.[key]))\n    .filter(isDefined);\n  const max = Math.max(...numericValues);\n  const min = Math.min(...numericValues);\n\n  return [min, max];\n};\n\nexport const getSafeDate = (date?: string | Date) => {\n  if (!date) {\n    return undefined;\n  }\n\n  try {\n    return new Date(date);\n  } catch (e) {\n    return undefined;\n  }\n};\n","import { CryptoAsset } from \"../../../services/crypto_assets/AssetsServiceInterface\";\nimport { AssetUpdate } from \"../../../services/feeds/FeedServiceInterface\";\nimport { FluxStandardAction } from \"../../context/AppActions\";\n\nexport enum AssetActionTypes {\n  GET_ASSETS_REQUEST = \"GET_ASSETS_REQUEST\",\n  GET_ASSETS_SUCCESS = \"GET_ASSETS_SUCCESS\",\n  GET_ASSETS_FAILURE = \"GET_ASSETS_FAILURE\",\n  UPDATE_ASSET = \"UPDATE_ASSET\",\n}\n\ninterface GetAssetsRequestAction extends FluxStandardAction<AssetActionTypes> {\n  type: AssetActionTypes.GET_ASSETS_REQUEST;\n}\n\ninterface GetAssetsSuccessAction extends FluxStandardAction<AssetActionTypes> {\n  type: AssetActionTypes.GET_ASSETS_SUCCESS;\n  payload: CryptoAsset[];\n}\n\ninterface GetAssetsFailureAction extends FluxStandardAction<AssetActionTypes> {\n  type: AssetActionTypes.GET_ASSETS_FAILURE;\n  payload: string;\n  error: boolean;\n}\n\ninterface UpdateAssetAction extends FluxStandardAction<AssetActionTypes> {\n  type: AssetActionTypes.UPDATE_ASSET;\n  payload: AssetUpdate;\n}\n\nexport type AssetActions =\n  | GetAssetsRequestAction\n  | GetAssetsSuccessAction\n  | GetAssetsFailureAction\n  | UpdateAssetAction;\n","import { AssetsState } from \"../crypto-assets/state/assetsReducer\";\n\nexport interface AppState {\n  assets?: AssetsState;\n}\nexport enum StateFetchStatus {\n  Idle = \"Idle\",\n  Failure = \"Failure\",\n  Busy = \"Busy\",\n}\n","import { Colors } from \"../theme/theme\";\nimport { DEFAULT_CURRENCY } from \"./constants\";\nimport { isDefined } from \"./isDefined\";\nimport { getSafeDate, getSafeNumber } from \"./safeGetters\";\nimport { format } from \"date-fns\";\n\nconst DEFAULT_LOCALE = \"en-US\";\nconst TIME_FORMAT = \"h:mm:ss aa\";\nconst DAY_DATE_FORMAT = \"MMMM d yyyy\";\nconst DAY_TIME_FORMAT = `MMM d, ${TIME_FORMAT}`;\nconst DATETIME_FORMAT = `${DAY_DATE_FORMAT}, ${TIME_FORMAT}`;\n\nconst formatNumber = (\n  value: number,\n  options: Intl.NumberFormatOptions | undefined,\n  locale = DEFAULT_LOCALE,\n): string => Intl.NumberFormat(locale, options).format(value);\n\nconst safelyFormatNumber = (\n  value: string | number | undefined,\n  options?: Intl.NumberFormatOptions,\n): string => {\n  const num = getSafeNumber(value);\n  if (isDefined(num)) {\n    return formatNumber(num, options);\n  }\n\n  return \"\";\n};\n\nexport const formatPrice = (\n  price?: string | number,\n  decimalPlaces = 2,\n): string =>\n  safelyFormatNumber(price, {\n    style: \"currency\",\n    currency: DEFAULT_CURRENCY.toUpperCase(),\n    maximumFractionDigits: decimalPlaces,\n    minimumFractionDigits: decimalPlaces,\n  }) || \"--\";\n\nexport const formatIntegerPrice = (price?: string | number) =>\n  formatPrice(price, 0);\n\nexport const formatPercent = (percent?: string | number) => {\n  const value = getSafeNumber(percent);\n  if (isDefined(value)) {\n    return formatNumber(value / 100, {\n      style: \"percent\",\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n  }\n  return \"--\";\n};\n\nexport const formatQuantity = (quantity?: string | number) =>\n  safelyFormatNumber(quantity) || \"--\";\n\nexport const getColorFromSign = (\n  value?: string | number,\n): Colors | undefined => {\n  const num = getSafeNumber(value);\n\n  if (!isDefined(num) || num === 0) {\n    return undefined;\n  }\n\n  return num > 0 ? \"green\" : \"red\";\n};\n\nconst safeDateFormat = (\n  timestamp: number | string | undefined,\n  formatTemplate: string,\n) => {\n  const milliseconds = getSafeNumber(timestamp);\n  if (!isDefined(milliseconds)) {\n    return \"\";\n  }\n  return format(milliseconds, formatTemplate);\n};\nexport const formatWeekdayDate = (\n  timestamp: number | string | undefined,\n): string => safeDateFormat(timestamp, DAY_DATE_FORMAT);\n\nexport const formatDateTime = (\n  timestamp: number | string | undefined,\n): string => safeDateFormat(timestamp, DATETIME_FORMAT);\n\nexport const formatDayTime = (timestamp: number | string | undefined): string =>\n  safeDateFormat(timestamp, DAY_TIME_FORMAT);\n\nexport const parseDateString = (date: string | Date | undefined) => {\n  const safeDate = getSafeDate(date);\n  return safeDate ? format(safeDate, DATETIME_FORMAT) : \"\";\n};\n","export const DEFAULT_ASSET_ID = \"bitcoin\";\nexport const DEFAULT_CURRENCY = \"usd\";\n","import styled from \"styled-components/macro\";\n\nexport const BaseWrapper = styled.div`\n  overflow: hidden;\n\n  border-radius: ${({ theme }) => theme.borderRadius};\n  box-shadow: ${({ theme }) => theme.boxShadow};\n\n  //elevation in dark theme\n  filter: brightness(1.08);\n`;\n\ninterface ContentWrapperProps {\n  minColumnSize?: string;\n  maxColumnSize?: string;\n}\nexport const ContentWrapper = styled.div<ContentWrapperProps>`\n  display: grid;\n  grid-template-columns: repeat(\n    auto-fit,\n    ${({ minColumnSize = \"20rem\", maxColumnSize = \"1fr\" }) =>\n      `minmax(${minColumnSize}, ${maxColumnSize})`}\n  );\n  place-content: center;\n  row-gap: 1rem;\n  margin: 1rem 0;\n  overflow: hidden;\n`;\n\nexport const MainSubContentWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  padding: 0.5rem;\n  overflow: auto;\n  text-align: center;\n\n  .content__sub,\n  .content__main,\n  .content__main--large {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .content__sub {\n    font-size: ${({ theme }) => theme.fontSize.bodyXSmall};\n    opacity: ${({ theme }) => theme.opacityMuted};\n  }\n  .content__main--large {\n    font-size: ${({ theme }) => theme.fontSize.h6};\n  }\n`;\n","import { Map } from \"immutable\";\n\nexport const arrayToMap = <T, K extends keyof T>(\n  array: T[],\n  key: K,\n): Map<T[K], T> => Map(array.map((val) => [val[key], val]));\n","import { AppActions } from \"../../context/AppActions\";\nimport { AssetActionTypes } from \"./AssetActions\";\nimport { OrderedMap } from \"immutable\";\nimport { CryptoAsset } from \"../../../services/crypto_assets/AssetsServiceInterface\";\nimport { arrayToMap } from \"../../../utils/arrayToMap\";\nimport { StateFetchStatus } from \"../../context/AppState\";\nimport { removeUndefinedEntries } from \"../../../utils/typedObjectEntries\";\n\nexport interface AssetsState {\n  list: OrderedMap<string, CryptoAsset>;\n  status: StateFetchStatus;\n  error?: string;\n}\n\nconst initalState: AssetsState = {\n  list: OrderedMap(),\n  status: StateFetchStatus.Idle,\n};\n\nexport const assetsReducer = (\n  state: AssetsState = initalState,\n  action: AppActions,\n) => {\n  switch (action.type) {\n    case AssetActionTypes.GET_ASSETS_REQUEST:\n      return {\n        ...state,\n        error: undefined,\n        status: StateFetchStatus.Busy,\n      };\n\n    case AssetActionTypes.GET_ASSETS_SUCCESS:\n      return {\n        ...state,\n        error: undefined,\n        status: StateFetchStatus.Idle,\n        list: state.list.merge(arrayToMap(action.payload, \"id\")),\n      };\n\n    case AssetActionTypes.GET_ASSETS_FAILURE:\n      return {\n        ...state,\n        status: StateFetchStatus.Failure,\n        error: action.payload,\n      };\n\n    case AssetActionTypes.UPDATE_ASSET:\n      return {\n        ...state,\n        list: state.list.update(action.payload.id, (prev) => ({\n          ...prev,\n          ...removeUndefinedEntries(action.payload),\n        })),\n      };\n    default:\n      return state;\n  }\n};\n","import { assetsReducer } from \"../crypto-assets/state/assetsReducer\";\nimport { AppActions } from \"./AppActions\";\nimport { AppState } from \"./AppState\";\n\nexport const appReducer = (state: AppState, action: AppActions): AppState => ({\n  assets: assetsReducer(state.assets, action),\n});\n","import React, { FC, createContext, useReducer, Dispatch } from \"react\";\nimport { AppActions } from \"./AppActions\";\nimport { appReducer } from \"./appReducer\";\nimport { AppState } from \"./AppState\";\n\nconst initialState: AppState = {};\nexport const CryptoAssetContext = createContext<\n  [AppState, Dispatch<AppActions>]\n>([initialState, () => null]);\n\nexport const CryptoAssetContextProvider: FC = (props) => {\n  const reducer = useReducer(appReducer, initialState);\n\n  return (\n    <CryptoAssetContext.Provider value={reducer}>\n      {props.children}\n    </CryptoAssetContext.Provider>\n  );\n};\n","import { FluxStandardAction } from \"../../components/context/AppActions\";\n\nexport enum UseServiceActionsTypes {\n  FETCH_REQUEST = \"FETCH_REQUEST\",\n  RESET = \"RESET\",\n}\n\ntype BaseServiceAction = FluxStandardAction<UseServiceActionsTypes>;\n\ninterface FetchServiceAction extends BaseServiceAction {\n  type: UseServiceActionsTypes.FETCH_REQUEST;\n  payload: any;\n}\n\ninterface ResetServiceAction extends BaseServiceAction {\n  type: UseServiceActionsTypes.RESET;\n}\n\nexport type ServiceActions = FetchServiceAction | ResetServiceAction;\n","import { useCallback, useEffect, useReducer, useRef } from \"react\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { ServiceActions, UseServiceActionsTypes } from \"./ServiceActions\";\n\ntype Service<Request, Response> = (request: Request) => Observable<Response>;\n\ninterface ServiceResponseHandler<Response> {\n  onResponse?(response: Response): void;\n  onError?(error: unknown): void;\n}\n\ninterface ServiceState {\n  status: \"FETCH_REQUESTED\" | \"IDLE\";\n  request?: any;\n}\n\nconst initialServiceState: ServiceState = {\n  status: \"IDLE\",\n};\n\nconst serviceReducer = (\n  state = initialServiceState,\n  action: ServiceActions,\n): ServiceState => {\n  switch (action.type) {\n    case UseServiceActionsTypes.FETCH_REQUEST:\n      return { ...state, status: \"FETCH_REQUESTED\", request: action.payload };\n    case UseServiceActionsTypes.RESET:\n      return initialServiceState;\n    default:\n      return state;\n  }\n};\n\nexport const useService = <Request, Response>(\n  service: Service<Request, Response>,\n  handlers?: ServiceResponseHandler<Response>,\n): [(request: Request) => void, boolean] => {\n  const [serviceState, dispatch] = useReducer(\n    serviceReducer,\n    initialServiceState,\n  );\n\n  const handlersRef = useRef<ServiceResponseHandler<Response> | undefined>(\n    handlers,\n  );\n\n  if (!handlersRef.current) {\n    handlersRef.current = handlers;\n  }\n\n  useEffect(() => {\n    let subscription: Subscription;\n    if (serviceState.status === \"FETCH_REQUESTED\") {\n      subscription = service(serviceState.request).subscribe({\n        next(nextValue) {\n          handlersRef.current?.onResponse?.(nextValue);\n        },\n        complete() {\n          dispatch({ type: UseServiceActionsTypes.RESET });\n          subscription?.unsubscribe();\n        },\n        error(error) {\n          console.error(error);\n          handlersRef.current?.onError?.(error);\n          dispatch({ type: UseServiceActionsTypes.RESET });\n        },\n      });\n    }\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, [service, serviceState.request, serviceState.status]);\n\n  const setRequest = useCallback(\n    (request: Request) => {\n      dispatch({\n        type: UseServiceActionsTypes.FETCH_REQUEST,\n        payload: request,\n      });\n    },\n    [dispatch],\n  );\n  const isBusy = serviceState.status === \"FETCH_REQUESTED\";\n  return [setRequest, isBusy];\n};\n","import { Observable } from \"rxjs\";\nimport { switchMap } from \"rxjs/operators\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport { getRequestParams } from \"./connectionHelpers\";\n\nexport enum RequestMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n}\n\nexport const AjaxConnection = <Request, Response>(\n  endpoint: string,\n  request: Request,\n  method: RequestMethod = RequestMethod.GET,\n): Observable<Response> => {\n  const { url, initRequest } = getRequestParams(endpoint, request, method);\n  return fromFetch(url, initRequest).pipe(\n    switchMap((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`got non-ok response: ${response.status}`);\n    }),\n  );\n};\n","import { AjaxConnection } from \"../connection/AjaxConnection\";\nimport {\n  AssetsServiceInterface,\n  GetAssetDetailsRequest,\n  GetCryptoAssetsRequest,\n  GlobalMarketMetricsResponse,\n  HistoricalAssetPriceRequest,\n  ServerCryptoAsset,\n} from \"./AssetsServiceInterface\";\nimport { map, retry } from \"rxjs/operators\";\nimport { assetsApi } from \"../connection/apis\";\nimport { DEFAULT_CURRENCY } from \"../../utils/constants\";\n\nconst ASSETS_PATH = `${assetsApi}/coins/`;\nconst MARKET_METRICS_PATH = `${assetsApi}/global/`;\n\ntype ServerGetAssetsResponse = ServerCryptoAsset[];\n\ninterface ServerGlobalMarketMetricsResponse {\n  data: GlobalMarketMetricsResponse;\n}\n\ninterface ServerGetHistoricalPriceResponse {\n  prices: Array<[number, number]> /*[timestamp, price] */;\n}\n\nexport const AssetsService: AssetsServiceInterface = {\n  getCryptoAssets: (request = { vs_currency: DEFAULT_CURRENCY }) =>\n    AjaxConnection<GetCryptoAssetsRequest, ServerGetAssetsResponse>(\n      `${ASSETS_PATH}markets`,\n      request,\n    ).pipe(\n      map((response) => ({\n        assets: response.map((asset) => ({\n          id: asset.id,\n          symbol: asset.symbol,\n          name: asset.name,\n          image: asset.image,\n          price: asset.current_price,\n          marketCap: asset.market_cap,\n          rank: asset.market_cap_rank,\n          fullyDilutedValuation: asset.fully_diluted_valuation,\n          totalVolume: asset.total_volume,\n          high24h: asset.high_24h,\n          low24h: asset.low_24h,\n          priceChange24h: asset.price_change_24h,\n          priceChangePercent24h: asset.price_change_percentage_24h,\n          priceChangePercent1h: asset.price_change_percentage_1h_in_currency,\n          marketCapChange24h: asset.market_cap_change_24h,\n          marketCapChangePercent24h: asset.market_cap_change_percentage_24h,\n          circulatingSupply: asset.circulating_supply,\n          totalSupply: asset.total_supply,\n          maxSupply: asset.max_supply,\n          lastUpdated: asset.last_updated,\n        })),\n      })),\n      retry(2),\n    ),\n\n  getGlobalMarketData: () =>\n    AjaxConnection<undefined, ServerGlobalMarketMetricsResponse>(\n      `${MARKET_METRICS_PATH}`,\n      undefined,\n    ).pipe(\n      map(({ data }) => ({\n        totalMarketCapUsd: data.total_market_cap[DEFAULT_CURRENCY],\n        totalVolumeUsd: data.total_volume[DEFAULT_CURRENCY],\n        marketCapPercentage: data.market_cap_percentage,\n        marketCapChangePercentage24hUsd:\n          data.market_cap_change_percentage_24h_usd,\n        updatedAt: data.updated_at,\n      })),\n      retry(2),\n    ),\n\n  getHistoricalPriceData: ({ id, ...request }: HistoricalAssetPriceRequest) =>\n    AjaxConnection<\n      Omit<HistoricalAssetPriceRequest, \"id\">,\n      ServerGetHistoricalPriceResponse\n    >(`${ASSETS_PATH}${id}/market_chart`, request).pipe(\n      map(({ prices }) => ({\n        id,\n        historicalPriceData: prices.map(([time, price]) => ({ time, price })),\n        days: request.days,\n      })),\n      retry(2),\n    ),\n\n  getAssetDetails: ({ id, ...request }: GetAssetDetailsRequest) =>\n    AjaxConnection<\n      Omit<GetAssetDetailsRequest, \"id\">,\n      ServerGetAssetDetailsResponse\n    >(`${ASSETS_PATH}${id}`, request).pipe(\n      map(\n        (response) => ({\n          id: response.id,\n          symbol: response.symbol,\n          name: response.name,\n          image: response.image.small,\n          price: response.market_data.current_price.usd,\n          marketCap: response.market_data.market_cap.usd,\n          rank: response.market_cap_rank,\n          fullyDilutedValuation:\n            response.market_data.fully_diluted_valuation.usd,\n          totalVolume: response.market_data.total_volume.usd,\n          high24h: response.market_data.high_24h.usd,\n          low24h: response.market_data.low_24h.usd,\n          priceChange24h: response.market_data.price_change_24h,\n          priceChangePercent24h:\n            response.market_data.price_change_percentage_24h,\n          priceChangePercentage7d:\n            response.market_data.price_change_percentage_7d,\n          priceChangePercentage14d:\n            response.market_data.price_change_percentage_14d,\n          priceChangePercentage30d:\n            response.market_data.price_change_percentage_30d,\n          priceChangePercentage60d:\n            response.market_data.price_change_percentage_60d,\n          priceChangePercentage200d:\n            response.market_data.price_change_percentage_200d,\n          priceChangePercentage1y:\n            response.market_data.price_change_percentage_1y,\n          marketCapChange24h: response.market_data.market_cap_change_24h,\n          marketCapChangePercent24h:\n            response.market_data.market_cap_change_percentage_24h,\n          circulatingSupply: response.market_data.circulating_supply,\n          totalSupply: response.market_data.total_supply,\n          maxSupply: response.market_data.max_supply,\n          lastUpdated: response.last_updated,\n          blockTimeInMinutes: response.block_time_in_minutes,\n          categories: response.categories,\n          description: response.description.en,\n          homepageLink: response.links.homepage?.find(Boolean),\n          genesisDate: response.genesis_date,\n          totalValueLocked: response.market_data.total_value_locked,\n          mcapToTotalValueLockedRatio: response.market_data.mcap_to_tvl_ratio,\n          allTimeHigh: response.market_data.ath.usd,\n          allTimeHighDate: response.market_data.ath_date.usd,\n        }),\n        retry(2),\n      ),\n    ),\n};\n\ninterface ServerGetAssetDetailsResponse {\n  id: string;\n  symbol: string;\n  name: string;\n  block_time_in_minutes: number;\n  hashing_algorithm: string;\n  categories: string[];\n  description: {\n    en: string;\n  };\n  links: {\n    homepage: Array<string | undefined>;\n    blockchain_site: Array<string | undefined>;\n    repos_url: {\n      github: string[];\n      bitbucket: string[];\n    };\n  };\n  image: {\n    thumb: string;\n    small: string;\n    large: string;\n  };\n  country_origin: string;\n  genesis_date: string;\n  sentiment_votes_up_percentage: number;\n  sentiment_votes_down_percentage: number;\n  market_cap_rank: number;\n  coingecko_rank: number;\n  coingecko_score: number;\n  developer_score: number;\n  community_score: number;\n  liquidity_score: number;\n  public_interest_score: number;\n  market_data: {\n    current_price: {\n      btc: number;\n      usd: number;\n    };\n    total_value_locked?: number;\n    mcap_to_tvl_ratio?: number;\n    fdv_to_tvl_ratio?: number;\n    ath: {\n      btc: number;\n      usd: number;\n    };\n    ath_change_percentage: {\n      btc: number;\n      usd: number;\n    };\n    ath_date: {\n      btc: string;\n      usd: string;\n    };\n    atl: {\n      btc: number;\n      usd: number;\n    };\n    atl_change_percentage: {\n      btc: number;\n      usd: number;\n    };\n    atl_date: {\n      btc: string;\n      usd: string;\n    };\n    market_cap: {\n      btc: number;\n      usd: number;\n    };\n    market_cap_rank: 1;\n    fully_diluted_valuation: {\n      btc: number;\n      usd: number;\n    };\n    total_volume: {\n      btc: number;\n      usd: number;\n    };\n    high_24h: {\n      btc: number;\n      usd: number;\n    };\n    low_24h: {\n      btc: number;\n      usd: number;\n    };\n    price_change_24h: number;\n    price_change_percentage_24h: number;\n    price_change_percentage_7d: number;\n    price_change_percentage_14d: number;\n    price_change_percentage_30d: number;\n    price_change_percentage_60d: number;\n    price_change_percentage_200d: number;\n    price_change_percentage_1y: number;\n    market_cap_change_24h: number;\n    market_cap_change_percentage_24h: number;\n    price_change_24h_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_1h_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_24h_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_7d_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_14d_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_30d_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_60d_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_200d_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    price_change_percentage_1y_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    market_cap_change_24h_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    market_cap_change_percentage_24h_in_currency: {\n      btc: number;\n      usd: number;\n    };\n    total_supply: number;\n    max_supply: number;\n    circulating_supply: number;\n    last_updated: string;\n  };\n  developer_data: {\n    forks: number;\n    stars: number;\n    subscribers: number;\n    total_issues: number;\n    closed_issues: number;\n    pull_requests_merged: number;\n    pull_request_contributors: number;\n    commit_count_4_weeks: number;\n  };\n  status_updates: [];\n  last_updated: string;\n}\n","export const assetsApi = process.env.REACT_APP_COINGECKO_URL;\nexport const pricesStreamApi = process.env.REACT_APP_COINCAP_WEBSOCKET;\n","import { isDefined } from \"./isDefined\";\n\nexport const jsonToString = (val: any): string | undefined => {\n  if (!isDefined(val)) {\n    return undefined;\n  }\n\n  try {\n    return JSON.stringify(val);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const parseJson = (val: any) => {\n  if (!isDefined(val)) {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(val);\n  } catch (error) {\n    return val;\n  }\n};\n","import { isDefined } from \"../../utils/isDefined\";\nimport { jsonToString } from \"../../utils/parseJson\";\nimport { RequestMethod } from \"./AjaxConnection\";\n\nconst objectEntriesToStringParams = (entries: Array<[string, unknown]>) =>\n  entries.reduce((stringParams, [field, value]) => {\n    if (isDefined(value)) {\n      return `${stringParams ? `${stringParams}&` : \"\"}${field}=${value}`;\n    }\n    return stringParams;\n  }, \"\");\n\nconst parseStringParams = (params: any): string => {\n  if (!params) {\n    return \"\";\n  }\n\n  if (typeof params === \"object\" && !Array.isArray(params)) {\n    return objectEntriesToStringParams(Object.entries(params));\n  }\n\n  return String(params);\n};\n\nconst parseUrl = (url: string, params?: any) => {\n  if (isDefined(params)) {\n    const stringParams = parseStringParams(params);\n    return encodeURI(`${url}?${stringParams}`);\n  }\n  return encodeURI(url);\n};\n\nconst getInitRequest = (method: RequestMethod, request: any): RequestInit => {\n  const headers = new Headers();\n  headers.set(\"Content-Type\", \"application/json\");\n\n  let body = undefined;\n\n  if (method === RequestMethod.POST) {\n    body = jsonToString(request);\n  }\n\n  return {\n    headers,\n    method,\n    body,\n  };\n};\n\nexport const getRequestParams = (\n  endpoint: string,\n  request: any,\n  method: RequestMethod | undefined,\n) => {\n  const validRequest = getValidRequest(request);\n  const url = parseUrl(endpoint, validRequest);\n  const initRequest = method && getInitRequest(method, validRequest);\n\n  return {\n    url,\n    initRequest,\n  };\n};\n\nconst getValidRequest = <T = any>(request: T): T | undefined => {\n  if (!request) {\n    return undefined;\n  }\n\n  if (typeof request === \"object\") {\n    const values = Object.values(request).filter(isDefined);\n    if (!values.length) {\n      return undefined;\n    }\n  }\n\n  return request;\n};\n","//https://www.material.io/resources/color/#!/?view.left=0&view.right=0&primary.color=37474F&secondary.color=efb90b\n\nexport const theme = {\n  colors: {\n    background: \"#212121\" as \"#212121\",\n    backgroundLight: \"#484848\" as \"#484848\",\n    backgroundDark: \"#121212\" as \"#121212\",\n    backgroundMuted: \"rgba(33,33,33,0.3)\" as \"rgba(33,33,33,0.3)\",\n    backgroundLightMuted: \"rgba(72,72,72, 0.3)\" as \"rgba(72,72,72, 0.3)\",\n    fontOnBackground: \"rgba(238,238,238)\" as \"rgba(238,238,238)\",\n    fontOnBackgroundLight: \"rgba(238,238,238)\" as \"rgba(238,238,238)\",\n    fontOnBackgroundDark: \"rgba(238,238,238)\" as \"rgba(238,238,238)\",\n    fontOnPrimary: \"rgba(255,255,255)\" as \"rgba(255,255,255)\",\n    fontOnPrimaryLight: \"rgb(0,0,0)\" as \"rgb(0,0,0)\",\n    fontOnPrimaryDark: \"rgb(255,255,255)\" as \"rgb(255,255,255)\",\n    primary: \"#f0b90b\" as \"#f0b90b\",\n    primaryLight: \"#ffeb50\" as \"#ffeb50\",\n    primaryDark: \"#b98900\" as \"#b98900\",\n    secondary: \"#37474f\" as \"#37474f\",\n    secondaryLight: \"#62717b\" as \"#62717b\",\n    secondaryDark: \"#101f27\" as \"#101f27\",\n    focus: \"#80bdff\" as \"#80bdff\",\n    border: \"#5c5c5d\" as \"#5c5c5d\",\n    borderMuted: \"rgba(92,92,93,0.2)\" as \"rgba(92,92,93,0.2)\",\n    red: \"#f75a6e\" as \"#f75a6e\",\n    green: \"#73e1b6\" as \"#73e1b6\",\n  },\n  borderRadius: \"3px\" as \"3px\",\n  opacityMuted: 0.7,\n  opacityDisabled: 0.45,\n  boxShadow: \"rgba(0,0,0,0.12) 0px 3px 4px 0px\" as \"rgba(0,0,0,0.12) 0px 3px 4px 0px\",\n  fontSize: {\n    h1: \"6rem\" as \"6rem\",\n    h2: \"3.75rem\" as \"3.75rem\",\n    h3: \"3rem\" as \"3rem\",\n    h4: \"2.125rem\" as \"2.125rem\",\n    h5: \"1.5rem\" as \"1.5rem\",\n    h6: \"1.25rem\" as \"1.25rem\",\n    body: \"1rem\" as \"1rem\",\n    bodySmall: \"0.875rem\" as \"0.875rem\",\n    bodyXSmall: \"0.75rem\" as \"0.75rem\",\n  },\n  screenSizes: {\n    mobileS: \"320px\" as \"320px\",\n    mobileM: \"375px\" as \"375px\",\n    mobileL: \"425px\" as \"425px\",\n    tablet: \"768px\" as \"768px\",\n    laptop: \"1024px\" as \"1024px\",\n    laptopL: \"1440px\" as \"1440px\",\n    desktop: \"2560px\" as \"2560px\",\n  },\n};\n\nexport type Theme = typeof theme;\nexport type Colors = keyof Theme[\"colors\"];\n","import { isDefined } from \"./isDefined\";\n\nexport const typedObjectEntries = <\n  T extends Record<string, any>,\n  K extends keyof T\n>(\n  obj: T,\n) => Object.entries(obj) as Array<[K, T[K]]>;\n\nexport const removeUndefinedEntries = <T extends Record<string, any>>(\n  obj: T,\n): T => {\n  const validEntries = Object.entries(obj).filter(([key, value]) =>\n    isDefined(value),\n  );\n\n  return Object.fromEntries(validEntries) as T;\n};\n","import { useCallback, useContext } from \"react\";\nimport { AssetsService } from \"../../services/crypto_assets/AssetsService\";\nimport { CryptoAssetContext } from \"../context/CryptoAssetContext\";\nimport { AssetActionTypes } from \"./state/AssetActions\";\nimport { useService } from \"../../utils/hooks/useService\";\nimport { GetCryptoAssetsRequest } from \"../../services/crypto_assets/AssetsServiceInterface\";\n\nexport const useAssetsService = () => {\n  const [appState, dispatch] = useContext(CryptoAssetContext);\n\n  const [setRequest] = useService(AssetsService.getCryptoAssets, {\n    onResponse(response) {\n      dispatch({\n        type: AssetActionTypes.GET_ASSETS_SUCCESS,\n        payload: response.assets,\n      });\n    },\n    onError() {\n      dispatch({\n        type: AssetActionTypes.GET_ASSETS_FAILURE,\n        payload: \"Error getting assets\",\n        error: true,\n      });\n    },\n  });\n\n  const getAssets = useCallback(\n    (request: GetCryptoAssetsRequest) => {\n      dispatch({ type: AssetActionTypes.GET_ASSETS_REQUEST });\n      setRequest(request);\n    },\n    [dispatch, setRequest],\n  );\n\n  return {\n    assets: appState.assets?.list,\n    status: appState.assets?.status,\n    error: appState.assets?.error,\n    getAssets,\n  };\n};\n\nexport const useAssetDetailsService = (assetId: string) => {\n  const [appState, dispatch] = useContext(CryptoAssetContext);\n\n  const [setRequest] = useService(AssetsService.getAssetDetails, {\n    onResponse(response) {\n      dispatch({\n        type: AssetActionTypes.UPDATE_ASSET,\n        payload: response,\n      });\n    },\n    onError() {\n      dispatch({\n        type: AssetActionTypes.GET_ASSETS_FAILURE,\n        payload: `Error getting ${assetId} details`,\n        error: true,\n      });\n    },\n  });\n\n  const getAsset = useCallback(() => {\n    setRequest({ id: assetId });\n  }, [setRequest, assetId]);\n\n  return {\n    asset: appState.assets?.list.get(assetId),\n    status: appState.assets?.status,\n    error: appState.assets?.error,\n    getAsset,\n  };\n};\n","export const isDefined = <T>(\n  val: T | null | undefined,\n): val is NonNullable<T> => val !== null && val !== undefined;\n\nexport const isNumber = (value: any): value is number =>\n  isDefined(value) && typeof value === \"number\" && Number.isFinite(value);\n","import styled from \"styled-components/macro\";\nimport { Colors } from \"../../theme/theme\";\n\nexport const PercentChange = styled.span<{ color?: Colors }>`\n  color: ${({ theme, color }) => color && theme.colors[color]};\n  font-size: ${({ theme }) => theme.fontSize.body};\n  padding-left: ${({ theme }) => theme.fontSize.bodyXSmall};\n  white-space: nowrap;\n`;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst SpinnerWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  min-height: 10rem;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Spinner = styled.div`\n  display: block;\n  width: 4rem;\n  height: 4rem;\n  border-radius: 50%;\n  border: 0.3rem solid ${({ theme }) => theme.colors.border};\n  border-color: ${({ theme }) => theme.colors.primary} transparent\n    ${({ theme }) => theme.colors.primary} transparent;\n  animation: ring-rotate 1.2s linear infinite;\n\n  @keyframes ring-rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nexport const LoadingSpinner: FC = (props) => {\n  return (\n    <SpinnerWrapper>\n      <Spinner />\n      {props.children}\n    </SpinnerWrapper>\n  );\n};\n","import { mergeMap, retryWhen, tap, delay, throttleTime } from \"rxjs/operators\";\nimport { getSafeNumber } from \"../../utils/safeGetters\";\nimport { pricesStreamApi } from \"../connection/apis\";\nimport { webSocketConnection } from \"../connection/websocketConnection\";\nimport {\n  AssetPrice,\n  FeedServiceInterface,\n  PriceFeedSubscriptionRequest,\n} from \"./FeedServiceInterface\";\n\nconst PRICES_PATH = `${pricesStreamApi}/prices`;\n\nconst mapAssetPriceToPriceUpdate = (asset: AssetPrice) => {\n  return Object.entries(asset).map(([id, priceUsd]) => ({\n    id,\n    price: getSafeNumber(priceUsd)!,\n  }));\n};\n\nexport const FeedService: FeedServiceInterface = {\n  priceFeed: (request: PriceFeedSubscriptionRequest) => {\n    return webSocketConnection<PriceFeedSubscriptionRequest, AssetPrice>(\n      PRICES_PATH,\n      request,\n    ).pipe(\n      throttleTime(1000),\n      mergeMap(mapAssetPriceToPriceUpdate),\n      retryWhen((errors) =>\n        errors.pipe(\n          tap(() => console.log(\"connection failed, retrying...\")),\n          delay(2000),\n        ),\n      ),\n    );\n  },\n};\n","import { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\nimport { parseJson } from \"../../utils/parseJson\";\nimport { getRequestParams } from \"./connectionHelpers\";\n\nexport const webSocketConnection = <Request, Response>(\n  endpoint: string,\n  request: Request,\n): WebSocketSubject<Response> => {\n  const { url } = getRequestParams(endpoint, request, undefined);\n  const subject = webSocket({\n    url,\n    deserializer: (event) => parseJson(event.data),\n    openObserver: {\n      next() {\n        console.info(`websocket connection opened.\\nsubscribed to ${url}`);\n      },\n    },\n    closeObserver: {\n      next(closeEvent) {\n        console.warn(closeEvent.code, \"websocket connection closed\");\n      },\n    },\n  });\n\n  return subject;\n};\n","import { useContext, useMemo, useEffect, useRef } from \"react\";\nimport { CryptoAssetContext } from \"../../components/context/CryptoAssetContext\";\nimport { AssetActionTypes } from \"../../components/crypto-assets/state/AssetActions\";\nimport { FeedService } from \"../../services/feeds/FeedService\";\nimport { useService } from \"./useService\";\n\nexport const usePricesFeed = () => {\n  const [appState, dispatch] = useContext(CryptoAssetContext);\n  const assets = useMemo(() => appState.assets?.list.keySeq().toArray(), [\n    appState.assets?.list,\n  ]);\n  const prevAssets = useRef<string>();\n\n  const [subscribeToFeed] = useService(FeedService.priceFeed, {\n    onResponse(response) {\n      dispatch({\n        type: AssetActionTypes.UPDATE_ASSET,\n        payload: response,\n      });\n    },\n    onError(err) {\n      console.error(\"Error\", err);\n    },\n  });\n\n  useEffect(() => {\n    const stringAssets = String(assets);\n    if (assets && stringAssets !== prevAssets.current) {\n      prevAssets.current = stringAssets;\n      subscribeToFeed({ assets });\n    }\n  }, [subscribeToFeed, assets]);\n};\n"],"sourceRoot":""}