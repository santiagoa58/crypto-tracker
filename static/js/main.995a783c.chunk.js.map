{"version":3,"sources":["components/crypto-assets/hooks/AssetActions.ts","logo.svg","components/header/Logo.tsx","components/header/NavLink.tsx","components/header/NavigationHeader.tsx","theme/theme.ts","components/context/AppState.ts","utils/arrayToMap.ts","components/crypto-assets/hooks/assetsReducer.ts","components/market-metrics/hooks/MarketMetricsActions.ts","components/market-metrics/hooks/marketMetricsReducer.ts","services/connection/AjaxConnection.ts","components/context/appReducer.ts","components/context/CryptoAssetContext.tsx","utils/isDefined.ts","utils/safeGetters.ts","utils/formatters.ts","utils/columnDefinitions.ts","components/grid/styled.ts","components/wrappers.tsx","components/grid/GridRowsOverlay.tsx","components/grid/Grid.tsx","components/crypto-assets/CryptoNameCell.tsx","components/crypto-assets/cryptoAssetsColDefs.ts","services/connection/connectionHelpers.ts","utils/parseJson.ts","utils/hooks/useServiceActions.ts","services/crypto_assets/AssetsService.ts","services/connection/apis.ts","utils/hooks/useService.ts","components/crypto-assets/CryptoAssetsGrid.tsx","components/crypto-assets/hooks/useAssetsService.ts","components/market-metrics/MarketMetrics.tsx","components/market-metrics/hooks/useMarketMetrics.ts","components/overview/MarketOverview.tsx","App.tsx","index.tsx"],"names":["AssetActionTypes","LogoWrapper","styled","img","Logo","src","logo","alt","NavItemWrapper","div","theme","colors","fontOnBackground","opacityMuted","primaryLight","NavLink","props","className","useRouteMatch","path","to","exact","undefined","children","NavBarWrapper","border","backgroundDark","NavBar","nav","NavigationHeader","background","backgroundLight","backgroundMuted","backgroundLightMuted","fontOnBackgroundLight","fontOnBackgroundDark","fontOnPrimary","fontOnPrimaryLight","fontOnPrimaryDark","primary","primaryDark","secondary","secondaryLight","secondaryDark","focus","red","green","borderRadius","opacityDisabled","boxShadow","fontSize","h1","h2","h3","h4","h5","h6","body","bodySmall","bodyXSmall","screenSizes","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","StateFetchStatus","arrayToMap","array","key","Map","map","val","MarketMetricsActionTypes","initalState","list","status","Idle","assetsReducer","state","action","type","GET_ASSETS_REQUEST","error","Busy","GET_ASSETS_SUCCESS","merge","payload","GET_ASSETS_FAILURE","Failure","RequestMethod","initialState","marketMetricsReducer","GET_GLOBAL_METRICS_REQUEST","GET_GLOBAL_METRICS_SUCCESS","GET_GLOBAL_METRICS_FAILURE","appReducer","assets","marketMetrics","CryptoAssetContext","createContext","CryptoAssetContextProvider","reducer","useReducer","Provider","value","isDefined","getSafeNumber","number","parseFloat","Number","isFinite","isNumber","getSafeString","String","formatNumber","options","locale","Intl","NumberFormat","format","safelyFormatNumber","num","formatPrice","price","decimalPlaces","style","currency","maximumFractionDigits","minimumFractionDigits","formatPercent","percent","getColorFromSign","stringCompare","valueA","valueB","localeCompare","numeric","numericColDef","comparator","minWidth","priceColDef","valueFormatter","integerPriceColDef","percentColDef","percentA","percentB","cellClassRules","params","quantityColDef","defaultColDefs","resizable","floatingFilter","sortable","suppressMovable","icons","sortAscending","sortDescending","GridWrapper","css","BaseWrapper","ContentWrapper","MainSubContentWrapper","ErrorWrapper","NoRowsOverlay","message","noRowsMessage","isError","getNoRowsMessage","loading","Grid","columnDefs","suppressDragLeaveHidesColumns","immutableData","defaultColDef","noRowsOverlayComponentFramework","noRowsOverlayComponentParams","Boolean","colDef","colId","NameCellWrapper","assetColDefs","field","headerName","width","initialSort","valueGetter","data","symbol","name","cellRendererFramework","toLowerCase","parseStringParams","Array","isArray","Object","entries","reduce","stringParams","getInitRequest","method","request","headers","Headers","set","POST","JSON","stringify","err","jsonToString","getRequestParams","endpoint","validRequest","getValidRequest","url","encodeURI","parseUrl","initRequest","values","filter","length","UseServiceActionsTypes","AjaxConnection","GET","fromFetch","pipe","switchMap","response","ok","json","Error","ASSETS_PATH","process","MARKET_METRICS_PATH","AssetsService","totalMarketCapUsd","total_market_cap","totalVolumeUsd","total_volume","marketCapPercentage","market_cap_percentage","marketCapChangePercentage24hUsd","market_cap_change_percentage_24h_usd","updatedAt","updated_at","initialServiceState","serviceReducer","FETCH_REQUEST","RESET","useService","service","handlers","serviceState","dispatch","handlersRef","useRef","current","useEffect","subscription","subscribe","next","nextValue","onResponse","complete","unsubscribe","console","onError","useCallback","AssetGridWrapper","getRowNodeId","row","id","CryptoAssetsGrid","search","useContext","appState","getAssets","useAssetsService","rowData","useMemo","valueSeq","toArray","PercentChange","span","color","MarketMetrics","getMarketMetrics","useMarketMetrics","percentChangeUsd","totalMarketCap","bitcoinDominance","MarketOverview","AppWrapper","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.995a783c.chunk.js","sourcesContent":["import { CryptoAsset } from \"../../../services/crypto_assets/AssetsServiceInterface\";\nimport { FluxStandardAction } from \"../../context/AppActions\";\n\nexport enum AssetActionTypes {\n  GET_ASSETS_REQUEST = \"GET_ASSETS_REQUEST\",\n  GET_ASSETS_SUCCESS = \"GET_ASSETS_SUCCESS\",\n  GET_ASSETS_FAILURE = \"GET_ASSETS_FAILURE\",\n}\ninterface BaseAssetAction extends FluxStandardAction<AssetActionTypes> {}\n\ninterface GetAssetsRequestAction extends BaseAssetAction {\n  type: AssetActionTypes.GET_ASSETS_REQUEST;\n}\n\ninterface GetAssetsSuccessAction extends BaseAssetAction {\n  type: AssetActionTypes.GET_ASSETS_SUCCESS;\n  payload: CryptoAsset[];\n}\n\ninterface GetAssetsFailureAction extends BaseAssetAction {\n  type: AssetActionTypes.GET_ASSETS_FAILURE;\n  payload: string;\n  error: boolean;\n}\n\nexport type AssetActions =\n  | GetAssetsRequestAction\n  | GetAssetsSuccessAction\n  | GetAssetsFailureAction;\n","export default __webpack_public_path__ + \"static/media/logo.8ddc634a.svg\";","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport logo from \"../../logo.svg\";\n\nexport const LogoWrapper = styled.img`\n  height: 2rem;\n`;\n\nexport const Logo = () => {\n  return <LogoWrapper src={logo} alt=\"logo\" />;\n};\n","import React, { FC } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport styled from \"styled-components/macro\";\n\nexport const NavItemWrapper = styled.div`\n  background-color: transparent;\n  padding: 0rem 0.5rem;\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n  opacity: ${({ theme }) => theme.opacityMuted};\n  white-space: nowrap;\n  transition: all 200ms;\n  border-bottom: solid 1px transparent;\n  margin-bottom: -1px;\n\n  a {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    color: inherit;\n    text-decoration: none;\n  }\n\n  &.nav-link--active,\n  &:focus,\n  &:hover {\n    border-bottom-color: ${({ theme }) => theme.colors.primaryLight};\n    opacity: 1;\n    cursor: pointer;\n  }\n`;\n\ninterface NavLinkProps {\n  to: string;\n  exact?: boolean;\n}\n\nexport const NavLink: FC<NavLinkProps> = (props) => {\n  const match = useRouteMatch({\n    path: props.to,\n    exact: props.exact,\n  });\n  const className = match ? \"nav-link--active\" : undefined;\n\n  return (\n    <NavItemWrapper className={className}>\n      <Link to={props.to}>{props.children}</Link>\n    </NavItemWrapper>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport { Logo, LogoWrapper } from \"./Logo\";\nimport { NavItemWrapper, NavLink } from \"./NavLink\";\n\nconst NavBarWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  align-items: center;\n\n  padding: 0.5rem 1rem 0rem 1rem;\n\n  border-bottom: solid 1px ${({ theme }) => theme.colors.border};\n  background-color: ${({ theme }) => theme.colors.backgroundDark};\n\n  ${LogoWrapper} {\n    margin: 0.5rem 0;\n  }\n`;\n\nconst NavBar = styled.nav`\n  display: flex;\n  justify-content: center;\n  height: 100%;\n\n  ${NavItemWrapper} {\n    &:not(:first-child) {\n      margin-left: 1rem;\n    }\n  }\n`;\n\nexport const NavigationHeader = () => {\n  return (\n    <NavBarWrapper>\n      <Logo />\n      <NavBar>\n        <NavLink to=\"/\" exact={true}>\n          Overview\n        </NavLink>\n        <NavLink to=\"/price-action\">Price Action</NavLink>\n      </NavBar>\n    </NavBarWrapper>\n  );\n};\n","//https://www.material.io/resources/color/#!/?view.left=0&view.right=0&primary.color=37474F&secondary.color=efb90b\n\nexport const theme = {\n  colors: {\n    background: \"#212121\" as \"#212121\",\n    backgroundLight: \"#484848\" as \"#484848\",\n    backgroundDark: \"#121212\" as \"#121212\",\n    backgroundMuted: \"rgba(33,33,33,0.3)\" as \"rgba(33,33,33,0.3)\",\n    backgroundLightMuted: \"rgba(72,72,72, 0.3)\" as \"rgba(72,72,72, 0.3)\",\n    fontOnBackground: \"rgba(238,238,238)\" as \"rgba(238,238,238)\",\n    fontOnBackgroundLight: \"rgba(238,238,238)\" as \"rgba(238,238,238)\",\n    fontOnBackgroundDark: \"rgba(238,238,238)\" as \"rgba(238,238,238)\",\n    fontOnPrimary: \"rgba(255,255,255)\" as \"rgba(255,255,255)\",\n    fontOnPrimaryLight: \"rgb(0,0,0)\" as \"rgb(0,0,0)\",\n    fontOnPrimaryDark: \"rgb(255,255,255)\" as \"rgb(255,255,255)\",\n    primary: \"#f0b90b\" as \"#f0b90b\",\n    primaryLight: \"#ffeb50\" as \"#ffeb50\",\n    primaryDark: \"#b98900\" as \"#b98900\",\n    secondary: \"#37474f\" as \"#37474f\",\n    secondaryLight: \"#62717b\" as \"#62717b\",\n    secondaryDark: \"#101f27\" as \"#101f27\",\n    focus: \"#80bdff\" as \"#80bdff\",\n    border: \"#5c5c5d\" as \"#5c5c5d\",\n    red: \"#f75a6e\" as \"#f75a6e\",\n    green: \"#73e1b6\" as \"#73e1b6\",\n  },\n  borderRadius: \"3px\" as \"3px\",\n  opacityMuted: 0.7,\n  opacityDisabled: 0.45,\n  boxShadow: \"rgba(0,0,0,0.12) 0px 3px 4px 0px\" as \"rgba(0,0,0,0.12) 0px 3px 4px 0px\",\n  fontSize: {\n    h1: \"6rem\" as \"6rem\",\n    h2: \"3.75rem\" as \"3.75rem\",\n    h3: \"3rem\" as \"3rem\",\n    h4: \"2.125rem\" as \"2.125rem\",\n    h5: \"1.5rem\" as \"1.5rem\",\n    h6: \"1.25rem\" as \"1.25rem\",\n    body: \"1rem\" as \"1rem\",\n    bodySmall: \"0.875rem\" as \"0.875rem\",\n    bodyXSmall: \"0.75rem\" as \"0.75rem\",\n  },\n  screenSizes: {\n    mobileS: \"320px\" as \"320px\",\n    mobileM: \"375px\" as \"375px\",\n    mobileL: \"425px\" as \"425px\",\n    tablet: \"768px\" as \"768px\",\n    laptop: \"1024px\" as \"1024px\",\n    laptopL: \"1440px\" as \"1440px\",\n    desktop: \"2560px\" as \"2560px\",\n  },\n};\n\nexport type Theme = typeof theme;\nexport type Colors = keyof Theme[\"colors\"];\n","import { AssetsState } from \"../crypto-assets/hooks/assetsReducer\";\nimport { GlobalMarketMetricsState } from \"../market-metrics/hooks/marketMetricsReducer\";\n\nexport interface AppState {\n  assets?: AssetsState;\n  marketMetrics?: GlobalMarketMetricsState;\n}\n\nexport enum StateFetchStatus {\n  Idle = \"Idle\",\n  Failure = \"Failure\",\n  Busy = \"Busy\",\n}\n","import { Map } from \"immutable\";\n\nexport const arrayToMap = <T, K extends keyof T>(\n  array: T[],\n  key: K,\n): Map<T[K], T> => Map(array.map((val) => [val[key], val]));\n","import { AppActions } from \"../../context/AppActions\";\nimport { AssetActionTypes } from \"./AssetActions\";\nimport { Map } from \"immutable\";\nimport { CryptoAsset } from \"../../../services/crypto_assets/AssetsServiceInterface\";\nimport { arrayToMap } from \"../../../utils/arrayToMap\";\nimport { StateFetchStatus } from \"../../context/AppState\";\nexport interface AssetsState {\n  list: Map<string, CryptoAsset>;\n  status: StateFetchStatus;\n  error?: string;\n}\n\nconst initalState: AssetsState = {\n  list: Map(),\n  status: StateFetchStatus.Idle,\n};\n\nexport const assetsReducer = (\n  state: AssetsState = initalState,\n  action: AppActions,\n) => {\n  switch (action.type) {\n    case AssetActionTypes.GET_ASSETS_REQUEST:\n      return {\n        ...state,\n        error: undefined,\n        status: StateFetchStatus.Busy,\n      };\n    case AssetActionTypes.GET_ASSETS_SUCCESS:\n      return {\n        ...state,\n        error: undefined,\n        status: StateFetchStatus.Idle,\n        list: state.list.merge(arrayToMap(action.payload, \"id\")),\n      };\n    case AssetActionTypes.GET_ASSETS_FAILURE:\n      return {\n        ...state,\n        status: StateFetchStatus.Failure,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { FluxStandardAction } from \"../../context/AppActions\";\nimport { GlobalMarketMetrics } from \"../../../services/crypto_assets/AssetsServiceInterface\";\n\nexport enum MarketMetricsActionTypes {\n  GET_GLOBAL_METRICS_REQUEST = \"GET_GLOBAL_METRICS_REQUEST\",\n  GET_GLOBAL_METRICS_SUCCESS = \"GET_GLOBAL_METRICS_SUCCESS\",\n  GET_GLOBAL_METRICS_FAILURE = \"GET_GLOBAL_METRICS_FAILURE\",\n}\n\ninterface GetGlobalMetricsRequestAction\n  extends FluxStandardAction<MarketMetricsActionTypes> {\n  type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_REQUEST;\n}\n\ninterface GetGlobalMetricsSuccessAction\n  extends FluxStandardAction<MarketMetricsActionTypes> {\n  type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_SUCCESS;\n  payload: GlobalMarketMetrics;\n}\n\ninterface GetGlobalMetricsFailureAction\n  extends FluxStandardAction<MarketMetricsActionTypes> {\n  type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_FAILURE;\n  payload: string;\n  error: boolean;\n}\n\nexport type MarketMetricActions =\n  | GetGlobalMetricsRequestAction\n  | GetGlobalMetricsSuccessAction\n  | GetGlobalMetricsFailureAction;\n","import { GlobalMarketMetrics } from \"../../../services/crypto_assets/AssetsServiceInterface\";\nimport { AppActions } from \"../../context/AppActions\";\nimport { StateFetchStatus } from \"../../context/AppState\";\nimport { MarketMetricsActionTypes } from \"./MarketMetricsActions\";\n\nexport interface GlobalMarketMetricsState extends Partial<GlobalMarketMetrics> {\n  status: StateFetchStatus;\n}\n\nconst initialState: GlobalMarketMetricsState = {\n  status: StateFetchStatus.Idle,\n};\n\nexport const marketMetricsReducer = (\n  state: GlobalMarketMetricsState = initialState,\n  action: AppActions,\n): GlobalMarketMetricsState => {\n  switch (action.type) {\n    case MarketMetricsActionTypes.GET_GLOBAL_METRICS_REQUEST:\n      return { ...state, status: StateFetchStatus.Busy };\n    case MarketMetricsActionTypes.GET_GLOBAL_METRICS_SUCCESS:\n      return { ...state, ...action.payload, status: StateFetchStatus.Idle };\n    case MarketMetricsActionTypes.GET_GLOBAL_METRICS_FAILURE:\n      return { ...state, status: StateFetchStatus.Failure };\n    default:\n      return state;\n  }\n};\n","import { Observable } from \"rxjs\";\nimport { switchMap } from \"rxjs/operators\";\nimport { fromFetch } from \"rxjs/fetch\";\nimport { getRequestParams } from \"./connectionHelpers\";\n\nexport enum RequestMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n}\n\nexport const AjaxConnection = <Request, Response>(\n  endpoint: string,\n  request: Request,\n  method: RequestMethod = RequestMethod.GET,\n): Observable<Response> => {\n  const { url, initRequest } = getRequestParams(endpoint, request, method);\n  return fromFetch(url, initRequest).pipe(\n    switchMap((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(`got non-ok response: ${response.status}`);\n    }),\n  );\n};\n","import { assetsReducer } from \"../crypto-assets/hooks/assetsReducer\";\nimport { marketMetricsReducer } from \"../market-metrics/hooks/marketMetricsReducer\";\nimport { AppActions } from \"./AppActions\";\nimport { AppState } from \"./AppState\";\n\nexport const appReducer = (state: AppState, action: AppActions): AppState => ({\n  assets: assetsReducer(state.assets, action),\n  marketMetrics: marketMetricsReducer(state.marketMetrics, action),\n});\n","import React, { FC, createContext, useReducer, Dispatch } from \"react\";\nimport { AppActions } from \"./AppActions\";\nimport { appReducer } from \"./appReducer\";\nimport { AppState } from \"./AppState\";\n\nconst initialState: AppState = {};\nexport const CryptoAssetContext = createContext<\n  [AppState, Dispatch<AppActions>]\n>([initialState, () => null]);\n\nexport const CryptoAssetContextProvider: FC = (props) => {\n  const reducer = useReducer(appReducer, initialState);\n\n  return (\n    <CryptoAssetContext.Provider value={reducer}>\n      {props.children}\n    </CryptoAssetContext.Provider>\n  );\n};\n","export const isDefined = <T>(\n  val: T | null | undefined,\n): val is NonNullable<T> => val !== null && val !== undefined;\n\nexport const isNumber = (value: any): value is number =>\n  isDefined(value) && typeof value === \"number\" && Number.isFinite(value);\n","import { isDefined, isNumber } from \"./isDefined\";\n\nexport const getSafeNumber = (value: any): number | undefined => {\n  const number = parseFloat(`${value}`);\n  if (isNumber(number)) {\n    return number;\n  }\n\n  return undefined;\n};\n\nexport const getSafeString = (value?: string | number): string => {\n  if (isDefined(value)) {\n    return typeof value === \"string\" ? value : String(value);\n  }\n\n  return \"\";\n};\n","import { Colors } from \"../theme/theme\";\nimport { isDefined } from \"./isDefined\";\nimport { getSafeNumber } from \"./safeGetters\";\n\nconst formatNumber = (\n  value: number,\n  options: Intl.NumberFormatOptions | undefined,\n  locale = \"en-US\",\n): string => Intl.NumberFormat(locale, options).format(value);\n\nconst safelyFormatNumber = (\n  value: string | number | undefined,\n  options?: Intl.NumberFormatOptions,\n): string => {\n  const num = getSafeNumber(value);\n  if (isDefined(num)) {\n    return formatNumber(num, options);\n  }\n\n  return \"\";\n};\n\nexport const formatPrice = (\n  price?: string | number,\n  decimalPlaces = 2,\n): string =>\n  safelyFormatNumber(price, {\n    style: \"currency\",\n    currency: \"USD\",\n    maximumFractionDigits: decimalPlaces,\n    minimumFractionDigits: decimalPlaces,\n  }) || \"--\";\n\nexport const formatIntegerPrice = (price?: string | number) =>\n  formatPrice(price, 0);\n\nexport const formatPercent = (percent?: string | number) => {\n  const value = getSafeNumber(percent);\n  if (isDefined(value)) {\n    return formatNumber(value / 100, {\n      style: \"percent\",\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n  }\n  return \"--\";\n};\n\nexport const formatQuantity = (quantity?: string | number) =>\n  safelyFormatNumber(quantity) || \"--\";\n\nexport const getColorFromSign = (\n  value?: string | number,\n): Colors | undefined => {\n  const num = getSafeNumber(value);\n\n  if (!isDefined(num) || num === 0) {\n    return undefined;\n  }\n\n  return num > 0 ? \"green\" : \"red\";\n};\n","import { ColDef } from \"ag-grid-community\";\nimport {\n  formatIntegerPrice,\n  formatPercent,\n  formatPrice,\n  formatQuantity,\n} from \"./formatters\";\nimport { isDefined } from \"./isDefined\";\nimport { getSafeNumber, getSafeString } from \"./safeGetters\";\n\nexport const stringCompare = (valueA?: string, valueB?: string) => {\n  return getSafeString(valueA).localeCompare(getSafeString(valueB), \"en\", {\n    numeric: true,\n  });\n};\n\nexport const percentComparator = (valueA: any, valueB: any) => {\n  const percentA = getSafeNumber(valueA);\n  const percentB = getSafeNumber(valueB);\n\n  if (!isDefined(percentA)) {\n    return -1;\n  }\n\n  if (!isDefined(percentB)) {\n    return 1;\n  }\n\n  return percentA - percentB;\n};\n\nexport const numericColDef: ColDef = {\n  type: \"numericColumn\",\n  comparator: stringCompare,\n  minWidth: 60,\n};\n\nexport const priceColDef: ColDef = {\n  ...numericColDef,\n  valueFormatter({ value }) {\n    return formatPrice(value);\n  },\n};\n\nexport const integerPriceColDef: ColDef = {\n  ...priceColDef,\n  valueFormatter({ value }) {\n    return formatIntegerPrice(value);\n  },\n};\n\nexport const percentColDef: ColDef = {\n  ...numericColDef,\n  comparator: percentComparator,\n  valueFormatter({ value }) {\n    return formatPercent(value);\n  },\n  cellClassRules: {\n    \"negative-value \": (params: { value?: string }) =>\n      (getSafeNumber(params.value) ?? 0) < 0,\n    \"positive-value \": (params: { value?: string }) =>\n      (getSafeNumber(params.value) ?? 0) > 0,\n  },\n};\n\nexport const quantityColDef: ColDef = {\n  ...numericColDef,\n  valueFormatter({ value }) {\n    return formatQuantity(value);\n  },\n};\n\nexport const defaultColDefs: ColDef = {\n  resizable: false,\n  floatingFilter: false,\n  sortable: true,\n  suppressMovable: true,\n  icons: {\n    sortAscending: '<span class=\"material-icons\">arrow_upward</span>',\n    sortDescending: '<span class=\"material-icons\">arrow_downward</span>',\n  },\n};\n","import styled, { css } from \"styled-components/macro\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\n\nexport const textEllipsisStyle = css`\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nexport const GridWrapper = styled.div`\n  height: 100%;\n\n  //GLOBAL\n  .ag-root-wrapper {\n    background-color: ${({ theme }) => theme.colors.secondaryDark};\n    color: ${({ theme }) => theme.colors.fontOnBackground};\n  }\n\n  .ag-right-aligned-cell {\n    text-align: right;\n  }\n\n  .ag-left-aligned-cell {\n    text-align: left;\n  }\n\n  .ag-body-viewport,\n  .ag-body-horizontal-scroll-viewport {\n    &::-webkit-scrollbar-track {\n      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n      border-radius: 0.75rem;\n      background-color: rgba(0, 0, 0, 0.9);\n    }\n\n    &::-webkit-scrollbar {\n      width: 0.875rem;\n      height: auto;\n      background-color: rgba(0, 0, 0, 0.9);\n    }\n\n    &::-webkit-scrollbar-thumb {\n      border-radius: 0.75rem;\n      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n      background-color: #484848;\n    }\n  }\n\n  //HEADER\n  .ag-header {\n    border-bottom: solid 1px ${({ theme }) => theme.colors.backgroundLight};\n    background-color: ${({ theme }) => theme.colors.backgroundLightMuted};\n  }\n\n  .ag-header-row {\n    font-weight: 700;\n    text-transform: uppercase;\n  }\n\n  .ag-header-cell,\n  .ag-cell {\n    padding-left: 1rem;\n    padding-right: 1rem;\n\n    &:focus {\n      border: solid 1px ${({ theme }) => theme.colors.focus};\n      outline: none;\n    }\n  }\n\n  .ag-header-cell {\n    &-resize {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      &::after {\n        content: \"\";\n        width: 2px;\n        height: 50%;\n        background-color: ${({ theme }) => theme.colors.border};\n      }\n    }\n  }\n\n  //ROW\n  .ag-row {\n    &:hover {\n      background-color: ${({ theme }) => theme.colors.secondary};\n    }\n  }\n\n  //CELL\n  .ag-cell {\n    line-height: 40px; //Default row height used to center text vertically\n\n    &.negative-value {\n      color: ${({ theme }) => theme.colors.red};\n    }\n    &.positive-value {\n      color: ${({ theme }) => theme.colors.green};\n    }\n  }\n\n  //ICONS\n  .ag-icon,\n  .ag-header-icon {\n    .material-icons {\n      font-size: ${({ theme }) => theme.fontSize.body};\n    }\n  }\n`;\n","import styled from \"styled-components/macro\";\n\nexport const BaseWrapper = styled.div`\n  overflow: hidden;\n\n  border-radius: ${({ theme }) => theme.borderRadius};\n  box-shadow: ${({ theme }) => theme.boxShadow};\n\n  //elevation in dark theme\n  filter: brightness(1.08);\n`;\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  width: fit-content;\n  padding: 1rem;\n  max-width: 100%;\n`;\n\nexport const MainSubContentWrapper = styled(BaseWrapper)`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondaryDark};\n  padding: 0.5rem 0.75rem;\n  margin: 0.5rem;\n  word-break: break-word;\n  text-align: center;\n\n  .content__sub,\n  .content__main {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .content__sub {\n    font-size: ${({ theme }) => theme.fontSize.bodyXSmall};\n    opacity: ${({ theme }) => theme.opacityMuted};\n  }\n  .content__main--large {\n    font-size: ${({ theme }) => theme.fontSize.h6};\n  }\n`;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { INoRowsOverlayParams } from \"ag-grid-community\";\nimport { BaseWrapper } from \"../wrappers\";\n\ninterface Props extends INoRowsOverlayParams {\n  noRowsMessage: string;\n  isError: boolean;\n}\n\nconst ErrorWrapper = styled(BaseWrapper)`\n  padding: 3rem;\n  background-color: ${({ theme }) => theme.colors.backgroundLightMuted};\n  color: ${({ theme }) => theme.colors.red};\n`;\n\nexport const NoRowsOverlay: FC<Props> = (props) => {\n  const message = <span>{props.noRowsMessage}</span>;\n  return props.isError ? <ErrorWrapper>{message}</ErrorWrapper> : message;\n};\n","import React, { PropsWithChildren } from \"react\";\nimport { AgGridReact, AgGridColumn } from \"ag-grid-react\";\nimport { ColDef, GridOptions } from \"ag-grid-community\";\nimport { defaultColDefs } from \"../../utils/columnDefinitions\";\nimport { GridWrapper } from \"./styled\";\nimport { NoRowsOverlay } from \"./GridRowsOverlay\";\n\nexport interface ColumnDefinition extends ColDef {\n  colId: string;\n}\n\ninterface GridProps<T> extends GridOptions {\n  rowData: T[] | undefined;\n  columnDefs: ColumnDefinition[];\n  loading?: boolean;\n  error?: string;\n}\n\nconst getNoRowsMessage = (loading?: boolean, error?: string): string => {\n  if (loading) {\n    return \"Loading...\";\n  }\n\n  return error || \"No Rows To Show\";\n};\n\nexport const Grid = <T extends Record<string, any>>({\n  columnDefs,\n  children,\n  loading,\n  error,\n  ...props\n}: PropsWithChildren<GridProps<T>>) => {\n  return (\n    <GridWrapper className=\"ag-theme-alpine-dark\">\n      <AgGridReact\n        suppressDragLeaveHidesColumns={true}\n        immutableData={true}\n        defaultColDef={defaultColDefs}\n        noRowsOverlayComponentFramework={NoRowsOverlay}\n        noRowsOverlayComponentParams={{\n          noRowsMessage: getNoRowsMessage(loading, error),\n          isError: Boolean(error),\n        }}\n        {...props}\n      >\n        {columnDefs.map((colDef) => (\n          <AgGridColumn key={colDef.colId} {...colDef} />\n        ))}\n      </AgGridReact>\n    </GridWrapper>\n  );\n};\n","import { ICellRendererParams } from \"ag-grid-community\";\nimport { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\n\nexport type CryptoNameValue = Pick<CryptoAsset, \"symbol\" | \"name\">;\ninterface CryptoNameCellProps extends ICellRendererParams {\n  value: CryptoNameValue;\n}\nconst NameCellWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 100%;\n\n  .cf {\n    font-size: ${({ theme }) => theme.fontSize.h6};\n  }\n\n  .crypto-name {\n    &__wrapper {\n      display: flex;\n      flex-direction: column;\n      line-height: 1.5;\n      padding-left: 0.75rem;\n      overflow: hidden;\n    }\n    &--sub,\n    &--main {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n    &--sub {\n      font-size: ${({ theme }) => theme.fontSize.bodyXSmall};\n      opacity: ${({ theme }) => theme.opacityMuted};\n    }\n  }\n`;\n\nexport const CryptoNameCell: FC<CryptoNameCellProps> = (props) => {\n  return (\n    <NameCellWrapper>\n      <i className={`cf cf-${props.value.symbol.toLowerCase()}`}></i>\n      <div className=\"crypto-name__wrapper\">\n        <span className=\"crypto-name--main\">{props.value.symbol}</span>\n        <span className=\"crypto-name--sub\">{props.value.name}</span>\n      </div>\n    </NameCellWrapper>\n  );\n};\n","import {\n  integerPriceColDef,\n  percentColDef,\n  priceColDef,\n  quantityColDef,\n  numericColDef,\n  stringCompare,\n} from \"../../utils/columnDefinitions\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { ColumnDefinition } from \"../grid/Grid\";\nimport { CryptoNameCell, CryptoNameValue } from \"./CryptoNameCell\";\n\nexport const assetColDefs: ColumnDefinition[] = [\n  {\n    ...numericColDef,\n    field: \"rank\",\n    colId: \"rank\",\n    headerName: \"#\",\n    width: 80,\n    initialSort: \"asc\",\n  },\n  {\n    field: \"name\",\n    colId: \"name\",\n    headerName: \"Name\",\n    valueGetter: ({ data }: { data: CryptoAsset }): CryptoNameValue => ({\n      symbol: data.symbol,\n      name: data.name,\n    }),\n    comparator: (valueA: CryptoNameValue, valueB: CryptoNameValue) =>\n      stringCompare(valueA.name, valueB.name),\n    cellRendererFramework: CryptoNameCell,\n    width: 200,\n    minWidth: 100,\n  },\n  {\n    ...priceColDef,\n    width: 130,\n    field: \"priceUsd\",\n    colId: \"priceUsd\",\n    headerName: \"PRICE\",\n  },\n  {\n    ...percentColDef,\n    width: 165,\n    field: \"changePercent24Hr\",\n    colId: \"changePercent24Hr\",\n    headerName: \"24h Change\",\n  },\n  {\n    ...integerPriceColDef,\n    width: 160,\n    field: \"volumeUsd24Hr\",\n    colId: \"volumeUsd24Hr\",\n    headerName: \"24h Volume\",\n  },\n  {\n    ...integerPriceColDef,\n    width: 180,\n    field: \"marketCapUsd\",\n    colId: \"marketCapUsd\",\n    headerName: \"Market Cap\",\n  },\n  {\n    ...quantityColDef,\n    width: 180,\n    field: \"supply\",\n    colId: \"supply\",\n    headerName: \"Supply\",\n  },\n  {\n    ...quantityColDef,\n    width: 150,\n    field: \"maxSupply\",\n    colId: \"maxSupply\",\n    headerName: \"Max Supply\",\n  },\n];\n","import { isDefined } from \"../../utils/isDefined\";\nimport { jsonToString } from \"../../utils/parseJson\";\nimport { RequestMethod } from \"./AjaxConnection\";\n\nconst objectEntriesToStringParams = (entries: Array<[string, unknown]>) =>\n  entries.reduce((stringParams, [field, value]) => {\n    if (isDefined(value)) {\n      return `${stringParams ? `${stringParams}&` : \"\"}${field}=${value}`;\n    }\n    return stringParams;\n  }, \"\");\n\nconst parseStringParams = (params: any): string => {\n  if (!params) {\n    return \"\";\n  }\n\n  if (typeof params === \"object\" && !Array.isArray(params)) {\n    return objectEntriesToStringParams(Object.entries(params));\n  }\n\n  return String(params);\n};\n\nconst parseUrl = (url: string, params?: any) => {\n  if (isDefined(params)) {\n    const stringParams = parseStringParams(params);\n    return encodeURI(`${url}?${stringParams}`);\n  }\n  return encodeURI(url);\n};\n\nconst getInitRequest = (method: RequestMethod, request: any): RequestInit => {\n  const headers = new Headers();\n  headers.set(\"Content-Type\", \"application/json\");\n\n  let body = undefined;\n\n  if (method === RequestMethod.POST) {\n    body = jsonToString(request);\n  }\n\n  return {\n    headers,\n    method,\n    body,\n  };\n};\n\nexport const getRequestParams = (\n  endpoint: string,\n  request: any,\n  method: RequestMethod,\n) => {\n  const validRequest = getValidRequest(request);\n  const url = parseUrl(endpoint, validRequest);\n  const initRequest = getInitRequest(method, validRequest);\n\n  return {\n    url,\n    initRequest,\n  };\n};\n\nconst getValidRequest = <T = any>(request: T): T | undefined => {\n  if (!request) {\n    return undefined;\n  }\n\n  if (typeof request === \"object\") {\n    const values = Object.values(request).filter(isDefined);\n    if (!values.length) {\n      return undefined;\n    }\n  }\n\n  return request;\n};\n","import { isDefined } from \"./isDefined\";\n\nexport const jsonToString = (val: any): string | undefined => {\n  if (!isDefined(val)) {\n    return undefined;\n  }\n\n  try {\n    return JSON.stringify(val);\n  } catch (err) {\n    return undefined;\n  }\n};\n","import { FluxStandardAction } from \"../../components/context/AppActions\";\n\nexport enum UseServiceActionsTypes {\n  FETCH_REQUEST = \"FETCH_REQUEST\",\n  RESET = \"RESET\",\n}\n\ntype BaseServiceAction = FluxStandardAction<UseServiceActionsTypes>;\n\ninterface FetchServiceAction extends BaseServiceAction {\n  type: UseServiceActionsTypes.FETCH_REQUEST;\n  payload: any;\n}\n\ninterface ResetServiceAction extends BaseServiceAction {\n  type: UseServiceActionsTypes.RESET;\n}\n\nexport type UseServiceActions = FetchServiceAction | ResetServiceAction;\n","import { AjaxConnection } from \"../connection/AjaxConnection\";\nimport {\n  AssetsServiceInterface,\n  CryptoAsset,\n  GetCryptoAssetsRequest,\n  GlobalMarketMetricsResponse,\n} from \"./AssetsServiceInterface\";\nimport { map } from \"rxjs/operators\";\nimport { assetsApi, marketMetricsApi } from \"../connection/apis\";\n\nconst ASSETS_PATH = `${assetsApi}/assets/`;\nconst MARKET_METRICS_PATH = `${marketMetricsApi}/global`;\n\ninterface ServerGetAssetsResponse {\n  data: Array<CryptoAsset>;\n}\n\ninterface ServerGlobalMarketMetricsResponse {\n  data: GlobalMarketMetricsResponse;\n}\n\nexport const AssetsService: AssetsServiceInterface = {\n  getCryptoAsset: (request = {}) =>\n    AjaxConnection<GetCryptoAssetsRequest, ServerGetAssetsResponse>(\n      `${ASSETS_PATH}`,\n      request,\n    ).pipe(map((response) => ({ assets: response.data }))),\n\n  getGlobalMarketData: () =>\n    AjaxConnection<undefined, ServerGlobalMarketMetricsResponse>(\n      `${MARKET_METRICS_PATH}`,\n      undefined,\n    ).pipe(\n      map(({ data }) => ({\n        totalMarketCapUsd: data.total_market_cap[\"usd\"],\n        totalVolumeUsd: data.total_volume[\"usd\"],\n        marketCapPercentage: data.market_cap_percentage,\n        marketCapChangePercentage24hUsd:\n          data.market_cap_change_percentage_24h_usd,\n        updatedAt: data.updated_at,\n      })),\n    ),\n};\n","export const assetsApi = process.env.REACT_APP_COINCAP_URL;\nexport const marketMetricsApi = process.env.REACT_APP_COINGECKO_URL;\n","import { useCallback, useEffect, useReducer, useRef } from \"react\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { UseServiceActions, UseServiceActionsTypes } from \"./useServiceActions\";\n\ntype Service<Request, Response> = (request: Request) => Observable<Response>;\n\ninterface ServiceResponseHandler<Response> {\n  onResponse?(response: Response): void;\n  onError?(error: unknown): void;\n}\n\ninterface ServiceState {\n  status: \"FETCH_REQUESTED\" | \"IDLE\";\n  request?: any;\n}\n\nconst initialServiceState: ServiceState = {\n  status: \"IDLE\",\n};\n\nconst serviceReducer = (\n  state = initialServiceState,\n  action: UseServiceActions,\n): ServiceState => {\n  switch (action.type) {\n    case UseServiceActionsTypes.FETCH_REQUEST:\n      return { ...state, status: \"FETCH_REQUESTED\", request: action.payload };\n    case UseServiceActionsTypes.RESET:\n      return initialServiceState;\n    default:\n      return state;\n  }\n};\n\nexport const useService = <Request, Response>(\n  service: Service<Request, Response>,\n  handlers?: ServiceResponseHandler<Response>,\n) => {\n  const [serviceState, dispatch] = useReducer(\n    serviceReducer,\n    initialServiceState,\n  );\n\n  const handlersRef = useRef<ServiceResponseHandler<Response> | undefined>(\n    handlers,\n  );\n\n  if (!handlersRef.current) {\n    handlersRef.current = handlers;\n  }\n\n  useEffect(() => {\n    let subscription: Subscription;\n    if (serviceState.status === \"FETCH_REQUESTED\") {\n      subscription = service(serviceState.request).subscribe({\n        next(nextValue) {\n          handlersRef.current?.onResponse?.(nextValue);\n        },\n        complete() {\n          dispatch({ type: UseServiceActionsTypes.RESET });\n          subscription?.unsubscribe();\n        },\n        error(error) {\n          console.error(error);\n          handlersRef.current?.onError?.(error);\n          dispatch({ type: UseServiceActionsTypes.RESET });\n        },\n      });\n    }\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, [service, serviceState.request, serviceState.status]);\n\n  const setRequest = useCallback(\n    (request: Request) => {\n      dispatch({\n        type: UseServiceActionsTypes.FETCH_REQUEST,\n        payload: request,\n      });\n    },\n    [dispatch],\n  );\n\n  return setRequest;\n};\n","import React, { FC, useMemo } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { CryptoAsset } from \"../../services/crypto_assets/AssetsServiceInterface\";\nimport { StateFetchStatus } from \"../context/AppState\";\nimport { Grid } from \"../grid/Grid\";\nimport { BaseWrapper } from \"../wrappers\";\nimport { assetColDefs } from \"./cryptoAssetsColDefs\";\nimport { useAssetsService } from \"./hooks/useAssetsService\";\n\nconst AssetGridWrapper = styled(BaseWrapper)`\n  height: 70vh;\n  max-width: 79rem;\n  margin: 0 auto;\n`;\n\nconst getRowNodeId = (row: CryptoAsset) => row.id;\n\nexport const CryptoAssetsGrid: FC = (props) => {\n  const { assets, status, error } = useAssetsService();\n\n  const rowData = useMemo(() => assets?.valueSeq().toArray(), [assets]);\n\n  return (\n    <AssetGridWrapper>\n      <Grid\n        rowData={rowData}\n        columnDefs={assetColDefs}\n        getRowNodeId={getRowNodeId}\n        error={error}\n        loading={status === StateFetchStatus.Busy}\n      />\n      {props.children}\n    </AssetGridWrapper>\n  );\n};\n","import { useContext, useEffect } from \"react\";\nimport { AssetsService } from \"../../../services/crypto_assets/AssetsService\";\nimport { CryptoAssetContext } from \"../../context/CryptoAssetContext\";\nimport { AssetActionTypes } from \"./AssetActions\";\nimport { useService } from \"../../../utils/hooks/useService\";\n\nexport const useAssetsService = (search?: string) => {\n  const [appState, dispatch] = useContext(CryptoAssetContext);\n\n  const getAssets = useService(AssetsService.getCryptoAsset, {\n    onResponse(response) {\n      dispatch({\n        type: AssetActionTypes.GET_ASSETS_SUCCESS,\n        payload: response.assets,\n      });\n    },\n    onError() {\n      dispatch({\n        type: AssetActionTypes.GET_ASSETS_FAILURE,\n        payload: \"Error getting assets\",\n        error: true,\n      });\n    },\n  });\n\n  useEffect(() => {\n    dispatch({ type: AssetActionTypes.GET_ASSETS_REQUEST });\n    getAssets({ search });\n  }, [dispatch, getAssets, search]);\n\n  return {\n    assets: appState.assets?.list,\n    status: appState.assets?.status,\n    error: appState.assets?.error,\n  };\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { Colors } from \"../../theme/theme\";\nimport {\n  formatPercent,\n  formatPrice,\n  getColorFromSign,\n} from \"../../utils/formatters\";\nimport { MainSubContentWrapper, ContentWrapper } from \"../wrappers\";\nimport { useMarketMetrics } from \"./hooks/useMarketMetrics\";\n\nconst PercentChange = styled.span<{ color?: Colors }>`\n  color: ${({ theme, color }) => color && theme.colors[color]};\n  font-size: ${({ theme }) => theme.fontSize.body};\n  padding-left: ${({ theme }) => theme.fontSize.bodyXSmall};\n  white-space: nowrap;\n`;\n\nexport const MarketMetrics: FC = (props) => {\n  const { marketMetrics } = useMarketMetrics();\n  const percentChangeUsd = formatPercent(\n    marketMetrics?.marketCapChangePercentage24hUsd,\n  );\n  const totalMarketCap = formatPrice(marketMetrics?.totalMarketCapUsd);\n  const bitcoinDominance = formatPercent(\n    marketMetrics?.marketCapPercentage?.[\"btc\"],\n  );\n\n  return (\n    <ContentWrapper>\n      <MainSubContentWrapper>\n        <span className=\"content__sub\">Total Market Cap</span>\n        <span className=\"content__main--large\">\n          {totalMarketCap}\n          <PercentChange\n            color={getColorFromSign(\n              marketMetrics?.marketCapChangePercentage24hUsd,\n            )}\n          >\n            {percentChangeUsd}\n          </PercentChange>\n        </span>\n      </MainSubContentWrapper>\n      <MainSubContentWrapper>\n        <span className=\"content__sub\">Bitcoin Dominance</span>\n        <span className=\"content__main--large\">{bitcoinDominance}</span>\n      </MainSubContentWrapper>\n    </ContentWrapper>\n  );\n};\n","import { useContext, useEffect } from \"react\";\nimport { AssetsService } from \"../../../services/crypto_assets/AssetsService\";\nimport { useService } from \"../../../utils/hooks/useService\";\nimport { CryptoAssetContext } from \"../../context/CryptoAssetContext\";\nimport { MarketMetricsActionTypes } from \"./MarketMetricsActions\";\n\nexport const useMarketMetrics = () => {\n  const [appState, dispatch] = useContext(CryptoAssetContext);\n\n  const getMarketMetrics = useService(AssetsService.getGlobalMarketData, {\n    onResponse(response) {\n      dispatch({\n        type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_SUCCESS,\n        payload: response,\n      });\n    },\n    onError() {\n      dispatch({\n        type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_FAILURE,\n        payload: \"Error getting global market data\",\n        error: true,\n      });\n    },\n  });\n\n  useEffect(() => {\n    dispatch({ type: MarketMetricsActionTypes.GET_GLOBAL_METRICS_REQUEST });\n    getMarketMetrics(null);\n  }, [dispatch, getMarketMetrics]);\n\n  return {\n    marketMetrics: appState.marketMetrics,\n  };\n};\n","import React from \"react\";\nimport { CryptoAssetsGrid } from \"../crypto-assets/CryptoAssetsGrid\";\nimport { MarketMetrics } from \"../market-metrics/MarketMetrics\";\n\nexport const MarketOverview = () => {\n  return (\n    <>\n      <MarketMetrics />\n      <CryptoAssetsGrid />\n    </>\n  );\n};\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components/macro\";\nimport \"./App.css\";\nimport { NavigationHeader } from \"./components/header/NavigationHeader\";\nimport { theme } from \"./theme/theme\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { CryptoAssetContextProvider } from \"./components/context/CryptoAssetContext\";\nimport { MarketOverview } from \"./components/overview/MarketOverview\";\n\nconst AppWrapper = styled.div`\n  max-width: ${({ theme }) => theme.screenSizes.desktop};\n  min-width: ${({ theme }) => theme.screenSizes.mobileS};\n  margin: 0 auto;\n  height: 100%;\n  overflow: auto;\n  font-size: ${({ theme }) => theme.fontSize.bodySmall};\n  background: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.fontOnBackground};\n\n  main {\n    padding: 1rem;\n  }\n`;\n\nfunction App() {\n  return (\n    <Router>\n      <CryptoAssetContextProvider>\n        <ThemeProvider theme={theme}>\n          <AppWrapper>\n            <NavigationHeader />\n            <main>\n              <Switch>\n                <Route path=\"/\" exact={true}>\n                  <MarketOverview />\n                </Route>\n              </Switch>\n            </main>\n          </AppWrapper>\n        </ThemeProvider>\n      </CryptoAssetContextProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}